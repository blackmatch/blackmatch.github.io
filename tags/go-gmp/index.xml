<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go, GMP on blackmatch 的个人博客</title><link>https://www.blackmatch.cn/tags/go-gmp/</link><description>Recent content in Go, GMP on blackmatch 的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 28 Feb 2025 15:41:00 +0800</lastBuildDate><atom:link href="https://www.blackmatch.cn/tags/go-gmp/index.xml" rel="self" type="application/rss+xml"/><item><title>从场景去理解 Go 的 GMP 模型：那我开 10000 个 Goroutine 会怎样？</title><link>https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/</link><pubDate>Fri, 28 Feb 2025 15:41:00 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/</guid><description>&lt;h2 id="概述">概述
&lt;/h2>&lt;p>学习 Go 的同学，肯定或多或少都对 Go 的 GMP 调度模型有所了解，网上也很多好的学习资料，这篇文章不会涉及太多 GMP 相关的理论知识。 GMP 模型能让 Go 程序尽可能压榨 CPU 的性能，从而提高并发处理能力。本文主要是从一个场景通过 debug 的方式去一窥 GMP 的工作方式，通过可视化的方式加深对 GMP 的理解。为了方便阅读先简单介绍一下 GMP：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>G&lt;/strong>：Goroutine ，Go 语言调度器中待执行的任务。&lt;/li>
&lt;li>&lt;strong>M&lt;/strong>：Machine，操作系统线程，用来执行 &lt;strong>G&lt;/strong> 的，调度器最多可以创建 10000 个线程，但最多只会有 &lt;code>GOMAXPROCS&lt;/code> 个活跃线程能够正常运行。&lt;/li>
&lt;li>&lt;strong>P&lt;/strong>：Processer，处理器，是 G 和 M 的中间层，它能提供线程需要的上下文环境，也会负责调度线程上的等待队列。&lt;/li>
&lt;/ul>
&lt;h2 id="场景开-10000-个-goroutine-并发读取-10000-个文件">场景：开 10000 个 Goroutine 并发读取 10000 个文件
&lt;/h2>&lt;p>在没有开始学习 Go 语言之前，我就听说 Go 的协程很厉害，轻量级，开几万个协程都可以。然后我就想试一试开 10000 个 Goroutine 看看是什么情况：&lt;/p>
&lt;ul>
&lt;li>先在本地创建 10000 个 txt 文件，每个文件的大小为 &lt;code>1M&lt;/code>：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/files.jpg"
width="1466"
height="772"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/files_hu_d67ea1694d3e54b4.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/files_hu_7fbdeed9fa20bd06.jpg 1024w"
loading="lazy"
alt="10000 个 txt 文件"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;ul>
&lt;li>开 10000 个 Goroutine 并发读取：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="mi">10000&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;done&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码写好开始执行：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/failed-to-create-os-thread.jpg"
width="758"
height="122"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/failed-to-create-os-thread_hu_a9771a97c5a4b19a.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/failed-to-create-os-thread_hu_ae27a83f7ce520ca.jpg 1024w"
loading="lazy"
alt="failed to create OS thread"
class="gallery-image"
data-flex-grow="621"
data-flex-basis="1491px"
>&lt;/p>
&lt;p>没想到竟然炸了，但好像又在意料之中。查了下这种情况是：操作系统对每个进程可以创建的线程数量有一定的限制。当 Go 程序尝试创建大量的 goroutine 时，每个 goroutine 最终可能需要一个操作系统线程来执行，一旦超过系统的线程数量限制，就会出现此错误。简而言之就是并发的 goroutine 太多了，我把并发量减少到 100，同时通过 &lt;code>trace&lt;/code> 包记录下运行时的数据方便后续分析，完整的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;trace.out&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">trace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">trace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Stop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">batchSize&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">batchSize&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">batchSize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">10000&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">filename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Done&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这次能成功运行了，会在当前目录下生成一个 &lt;code>trace.out&lt;/code> 文件，我们执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">go tool trace trace.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后根据提示打开浏览器就可以看到如下内容：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/trace-gmp.jpg"
width="3828"
height="1682"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/trace-gmp_hu_2e2a775d948611b3.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/trace-gmp_hu_e72e3dce1a41a284.jpg 1024w"
loading="lazy"
alt="trace GMP"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;p>点击彩色部分可以在底下看到相关的信息，例如上图中是某一时刻 goroutine 的情况，可以看到当前 G0 处于 &lt;code>GCWaiting&lt;/code> 状态，正在执行的 G 的 id 是 85，其他的暂时不展开了。通过 &lt;code>trace&lt;/code> 包我们可以通过可视化的方式对 GMP 有了大概的感知，接下来我们继续分析 GMP 的调度。 我们把 &lt;code>trace&lt;/code> 相关的代码去掉，把 G 的并发两加到 1000，然后通过 DEBUG 工具来分析：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-1.jpg"
width="1844"
height="354"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-1_hu_cec38e0f60cfc3c0.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-1_hu_684db1beba7edff4.jpg 1024w"
loading="lazy"
alt="GODEBUG"
class="gallery-image"
data-flex-grow="520"
data-flex-basis="1250px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">schedtrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">500&lt;/span> ./main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解释一下这个命令和输出的内容，这个命令是通过 debug 的方式启动 Go 程序，其中的 &lt;code>schedtrace&lt;/code> 是指定 debug 的内容为调度器相关的数据，500 表示的是每隔 500 毫秒打印一次信息。关于输出的内容：&lt;/p>
&lt;ul>
&lt;li>&lt;code>xxms&lt;/code> 表示程序启动到打印当前信息过去了多长时间。&lt;/li>
&lt;li>&lt;code>gomaxprocs&lt;/code> 表示最多会有多少个 P 来处理 G，默认为CPU 的核心数，可以通过环境变量 &lt;code>GOMAXPROCS&lt;/code> 和 &lt;code>runtime.GOMAXPROCS()&lt;/code>这个函数来调整。&lt;/li>
&lt;li>&lt;code>idleprocs&lt;/code> 表示处于空闲状态的 P 数量。&lt;/li>
&lt;li>&lt;code>threads&lt;/code> 表示正在运行的线程数量。&lt;/li>
&lt;li>&lt;code>spinningthreads&lt;/code> 表示处于自旋状态的线程的数量。在 Go 运行时的调度系统中，自旋是一种线程的状态，处于自旋状态的线程不会进入休眠，而是持续地检查是否有可执行的任务。&lt;/li>
&lt;li>&lt;code>needspinning&lt;/code> 是一个用于判断是否需要启动新的自旋线程的条件。Go 运行时的调度器会根据当前系统的状态和任务负载来决定是否需要创建新的自旋线程。&lt;/li>
&lt;li>&lt;code>idlethreads&lt;/code> 表示处于空闲状态的线程数量。&lt;/li>
&lt;li>&lt;code>runqueue&lt;/code> 表示全局队列中正在等待被执行的 G 的数量。&lt;/li>
&lt;li>[0 0 0 0 0 0 0 0] 表示每个 P 的本地队列中等待被执行的 G 的数量。数组的长度为 &lt;code>GOMAXPROCS&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>从上图可以观察到一个比较奇怪的现象：为什么数组里的元素的值都是 0，也就是说每个 P 的本地队列都是空的。稍加思索后，我想到可能是因为我设置了每隔 500 毫秒才打印一次信息，可能程序执行太快，500 毫秒后所有的 G 都已经执行完成或者正在执行中，所以本地队列里都是空的。我调成 100 毫秒后结果如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-2.jpg"
width="1932"
height="1148"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-2_hu_dd66432403937c1c.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-2_hu_73076a2dae63afaf.jpg 1024w"
loading="lazy"
alt="GODEBUG"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;p>从上图中可以看出：&lt;/p>
&lt;ul>
&lt;li>&lt;code>idleprocs&lt;/code> 的值在不断变化，但最大不会超过 &lt;code>gomaxprocs&lt;/code> 的值。&lt;/li>
&lt;li>&lt;code>threads&lt;/code> 稳定在 90 多，说明同时有 90 多个线程在工作。&lt;/li>
&lt;li>在全局队列几乎为 0 的情况下，各个 P 的本地队列数量之和是在逐步减少的，但是某个 P 的队列的数量会突然增多。&lt;/li>
&lt;/ul>
&lt;p>随后我又将 G 的并发调成 2000 进行调试，得到如下结果：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-3.jpg"
width="2176"
height="1300"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-3_hu_53014ecc927bc6d9.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-3_hu_48254ff68aca3ab5.jpg 1024w"
loading="lazy"
alt="GODEBUG"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>结合 GMP 的理论知识，我们可以得到以下结论：&lt;/p>
&lt;ul>
&lt;li>Go 会开启多线程去并发执行 goroutine，线程的数量会根据 goroutine 的数量进行调整。&lt;/li>
&lt;li>GMP 通过 &lt;strong>hand off 机制&lt;/strong>，当正在执行的 G 发生阻塞时，会把 G 与当前的 P 断开，将 P 及其本地队列重新绑定到一个休眠的 M 上或者新建一个 M 来绑定。可以从调试的结果中看出在执行到后期 &lt;code>idleprocs&lt;/code> 的值等于 &lt;code>gomaxprocs&lt;/code> 的值了，这是因为 G 执行的都是阻塞任务（读取文件），每个 G 经过 P 的短暂处理后就会跟 P 断开，所以程序执行到后面会有很多空闲的 P，G 都已经进入系统调用状态，最后被放入全局队列后最终被执行完成。&lt;/li>
&lt;li>GMP 通过 &lt;strong>work stealing 机制&lt;/strong>，当一个 P 的本地队列和全局队列都空了的时候，它就从其他 P 的队列中偷一些 G 过来放到自己的本地队列中。图中数组倒数第二个元素最后一个大于 0 的值为 54，这个值大于之前出现过的所有的值，就说明对应的 P 是从其他 P 的本地队列中偷了一部分 G 过来了。&lt;/li>
&lt;/ul>
&lt;p>综上，Go 的 GMP 模型使其能够最大限度地压榨 CPU 的性能，从而能够支撑更高的并发，提升程序的性能。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>刘丹冰 B 站视频&lt;/li>
&lt;li>&lt;a class="link" href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#65-%E8%B0%83%E5%BA%A6%E5%99%A8" target="_blank" rel="noopener"
>https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#65-%E8%B0%83%E5%BA%A6%E5%99%A8&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>