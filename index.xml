<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blackmatch 的个人博客</title><link>https://www.blackmatch.cn/</link><description>Recent content on blackmatch 的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 02 Mar 2025 07:14:00 +0800</lastBuildDate><atom:link href="https://www.blackmatch.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC 学习备忘</title><link>https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/</link><pubDate>Sun, 02 Mar 2025 07:14:00 +0800</pubDate><guid>https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/</guid><description>&lt;p>什么是 gRPC？&lt;/p>
&lt;blockquote>
&lt;p>A high performance, open source universal RPC framework.&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>gRCP&lt;/code> 是一个高性能、开源的、通用的 RPC 框架：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/grpc-architecture.svg"
loading="lazy"
alt="gRPC 架构"
>&lt;/p>
&lt;p>从上图可以看出：&lt;/p>
&lt;ul>
&lt;li>gRPC 分为服务端（Server）和客户端（Stub/Client）两个部分&lt;/li>
&lt;li>服务端和客户端之间通过 &lt;code>Protocal Buffers&lt;/code> 协议进行通讯&lt;/li>
&lt;li>服务端和客户端支持跨语言调用&lt;/li>
&lt;/ul>
&lt;p>gRPC 支持众多主流编程语言：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/grpc-supported-language.jpg"
width="626"
height="692"
srcset="https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/grpc-supported-language_hu_c3a1bcaf553205fa.jpg 480w, https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/grpc-supported-language_hu_e4330c15203b1d76.jpg 1024w"
loading="lazy"
alt="gRPC 支持的编程语言"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>下面通过一个 Hello world demo 来逐步了解 gRPC。&lt;/p>
&lt;h2 id="protocal-buffers">Protocal Buffers
&lt;/h2>&lt;blockquote>
&lt;p>Protocol Buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.&lt;/p>&lt;/blockquote>
&lt;p>简单来说 &lt;a class="link" href="https://protobuf.dev/overview/" target="_blank" rel="noopener"
>Protocal Buffers&lt;/a> 是一套用于序列化和反序列化数据的机制，与平台无关，与语言无关，gRPC 默认使用这套机制。举个例子 &lt;code>./proto/greeter.proto&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-proto" data-lang="proto">&lt;span class="line">&lt;span class="cl">&lt;span class="n">syntax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">go_package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;./greeter&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c1">// The greeting service definition.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">service&lt;/span> &lt;span class="n">Greeter&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// Sends a greeting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">SayHello&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloReply&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c1">// The request message containing the user&amp;#39;s name.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">HelloRequest&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c1">// The response message containing the greetings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">HelloReply&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="kd">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>syntax = &amp;quot;proto3&amp;quot;;&lt;/code> 是固定写法，显式声明使用 Protocal Buffers 的 version 3 版本。&lt;/li>
&lt;li>&lt;code>option go_package = &amp;quot;./greeter&amp;quot;;&lt;/code> 是定义生成 Go 语言的配置，这里的配置会在当前目录下生成一个 &lt;code>greeter&lt;/code> 目录，里面的报名也是 &lt;code>greeter&lt;/code>。其他语言写法大同小异。&lt;/li>
&lt;li>&lt;code>service&lt;/code> 是 Protocal Buffers 用来定义一个微服务的关键字，service 里面可以定义各种微服务需要提供的方法，最主要的就是要声明入参（这里是 &lt;code>HelloRequest&lt;/code>）和出参（这里是 &lt;code>HelloReply&lt;/code>）。&lt;/li>
&lt;li>&lt;code>message&lt;/code> 是 Protocal Buffers 用来定义一个结构体的关键字，对应的 Go 语言的 &lt;code>struct&lt;/code> 关键字。&lt;/li>
&lt;/ul>
&lt;p>Protocal Buffers 有自己的基本数据类型，并且能契合各种编程语言：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/protocal-buffers-data-type.jpg"
width="2522"
height="1650"
srcset="https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/protocal-buffers-data-type_hu_6787d261563e933b.jpg 480w, https://www.blackmatch.cn/p/grpc-%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/protocal-buffers-data-type_hu_d64ce75dab30e9c0.jpg 1024w"
loading="lazy"
alt="Protocal Buffers 的数据类型"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>Protocal Buffers 使用 &lt;code>.proto&lt;/code> 作为文件后缀，定义好相关内容后，就可以使用配套的工具生成对应编程语言所需要的代码文件，这里以 Go 语言为例，在 &lt;code>./proto&lt;/code> 目录下执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">protoc --go_out&lt;span class="o">=&lt;/span>./ *.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令主要是根据 &lt;code>message&lt;/code> 关键字定义的内容生成 Go 语言对应的结构体及一些相关的函数，会生成一个名为 &lt;code>./proto/greeter/greeter.pb.go&lt;/code> 文件，这个文件可以直接在 Go 语言代码中引用，具体内容就不展开了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">protoc --go-grpc_out&lt;span class="o">=&lt;/span>./ *.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令会生成 gRPC 所需的一些接口和方法，会生成一个名为 &lt;code>./proto/greeter/greeter_grpc.pb.go&lt;/code> 文件，这个文件里包含很多内容，这里挑几个重要的解释一下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// The greeting service definition.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">GreeterClient&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Sends a greeting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">SayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">in&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HelloRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">opts&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CallOption&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">HelloReply&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 interface 是根据 Protocal Buffer 中 &lt;code>service&lt;/code> 关键字定义的内容来生成的，定义一个 gRPC 接口，包含相关的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">RegisterGreeterServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ServiceRegistrar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">srv&lt;/span> &lt;span class="nx">GreeterServer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// If the following call pancis, it indicates UnimplementedGreeterServer was&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// embedded by pointer and is nil. This will cause panics if an&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// unimplemented method is ever invoked, so we test this at initialization&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// time to prevent it from happening at runtime later due to I/O.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">srv&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nf">testEmbeddedByValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">});&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">testEmbeddedByValue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Greeter_ServiceDesc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">srv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这一段是用于 gRPC 服务端注册服务时使用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewGreeterClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cc&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ClientConnInterface&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">GreeterClient&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">greeterClient&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">cc&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这一段是用于 gRPC 客户端跟服务端建立连接时使用的。&lt;/p>
&lt;p>通过 Protocal Buffers 配套工具生成的代码文件是服务端和客户端通用的，一份 &lt;code>.proto&lt;/code> 文件可以生成多份不同编程语言的代码。上述生成 Go 语言代码的例子用到了 3 个工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install protobuf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install protoc-gen-go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install protoc-gen-go-grpc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>protobuf&lt;/code> 是主程序，在命令行通过 &lt;code>protoc&lt;/code> 使用。&lt;/li>
&lt;li>&lt;code>protoc-gen-go&lt;/code> 对应 &lt;code>--go_out&lt;/code> 参数，用于生成 &lt;code>greeter.pb.go&lt;/code> 文件。&lt;/li>
&lt;li>&lt;code>protoc-gen-go-grpc&lt;/code> 对应 &lt;code>--go-grpc_out&lt;/code> 参数，用于生成 &lt;code>greeter_grpc.pb.go&lt;/code> 文件。&lt;/li>
&lt;/ul>
&lt;h2 id="服务端server">服务端（Server）
&lt;/h2>&lt;p>服务端的构建分为以下几个步骤：&lt;/p>
&lt;ul>
&lt;li>新建一个结构体，将 Protocal Buffers 中定义的服务的方法实现并绑定到这个结构体。&lt;/li>
&lt;li>新建一个 gRPC 服务。&lt;/li>
&lt;li>将上述新建的结构体注册到新建的 gRPC 服务中。&lt;/li>
&lt;li>新建一个监听器，用于将 gRPC 服务暴露到某个端口。&lt;/li>
&lt;li>启动 gRPC 服务。&lt;/li>
&lt;/ul>
&lt;p>完整的代码示例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UnimplementedGreeterServer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">in&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HelloRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HelloReply&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HelloReply&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">in&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">grpcServer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterGreeterServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">grpcServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listener&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to listen: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpcServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Serve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to serve: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="客户端stubclient">客户端（Stub/Client）
&lt;/h2>&lt;p>客户端调用服务端分为以下几个步骤：&lt;/p>
&lt;ul>
&lt;li>新建一个 gRPC 客户端连接。&lt;/li>
&lt;li>使用这个 gRPC 连接新建一个 Protocal Buffers 生成的客户端。&lt;/li>
&lt;li>使用新建的客户端直接调用服务端的方法。&lt;/li>
&lt;/ul>
&lt;p>完整的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clientConn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;localhost:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithTransportCredentials&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">insecure&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCredentials&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error connecting to server&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">greeterClient&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewGreeterClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">clientConn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">greeterClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HelloRequest&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error calling SayHello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 &lt;code>grpc.WithTransportCredentials(insecure.NewCredentials())&lt;/code> 参数是指客户端不实用任何安全机制跟服务端通讯，是明文传输，这里是本地 demo 调试，不用在意。生产环境通常需要配置 TLS，使用 &lt;code>credentials.NewTLS()&lt;/code>。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://grpc.io/docs/what-is-grpc/introduction/" target="_blank" rel="noopener"
>https://grpc.io/docs/what-is-grpc/introduction/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://protobuf.dev/programming-guides/proto3/" target="_blank" rel="noopener"
>https://protobuf.dev/programming-guides/proto3/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>从场景去理解 Go 的 GMP 模型：那我开 10000 个 Goroutine 会怎样？</title><link>https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/</link><pubDate>Fri, 28 Feb 2025 15:41:00 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/</guid><description>&lt;h2 id="概述">概述
&lt;/h2>&lt;p>学习 Go 的同学，肯定或多或少都对 Go 的 GMP 调度模型有所了解，网上也很多好的学习资料，这篇文章不会涉及太多 GMP 相关的理论知识。 GMP 模型能让 Go 程序尽可能压榨 CPU 的性能，从而提高并发处理能力。本文主要是从一个场景通过 debug 的方式去一窥 GMP 的工作方式，通过可视化的方式加深对 GMP 的理解。为了方便阅读先简单介绍一下 GMP：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>G&lt;/strong>：Goroutine ，Go 语言调度器中待执行的任务。&lt;/li>
&lt;li>&lt;strong>M&lt;/strong>：Machine，操作系统线程，用来执行 &lt;strong>G&lt;/strong> 的，调度器最多可以创建 10000 个线程，但最多只会有 &lt;code>GOMAXPROCS&lt;/code> 个活跃线程能够正常运行。&lt;/li>
&lt;li>&lt;strong>P&lt;/strong>：Processer，处理器，是 G 和 M 的中间层，它能提供线程需要的上下文环境，也会负责调度线程上的等待队列。&lt;/li>
&lt;/ul>
&lt;h2 id="场景开-10000-个-goroutine-并发读取-10000-个文件">场景：开 10000 个 Goroutine 并发读取 10000 个文件
&lt;/h2>&lt;p>在没有开始学习 Go 语言之前，我就听说 Go 的协程很厉害，轻量级，开几万个协程都可以。然后我就想试一试开 10000 个 Goroutine 看看是什么情况：&lt;/p>
&lt;ul>
&lt;li>先在本地创建 10000 个 txt 文件，每个文件的大小为 &lt;code>1M&lt;/code>：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/files.jpg"
width="1466"
height="772"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/files_hu_d67ea1694d3e54b4.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/files_hu_7fbdeed9fa20bd06.jpg 1024w"
loading="lazy"
alt="10000 个 txt 文件"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;ul>
&lt;li>开 10000 个 Goroutine 并发读取：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="mi">10000&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;done&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码写好开始执行：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/failed-to-create-os-thread.jpg"
width="758"
height="122"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/failed-to-create-os-thread_hu_a9771a97c5a4b19a.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/failed-to-create-os-thread_hu_ae27a83f7ce520ca.jpg 1024w"
loading="lazy"
alt="failed to create OS thread"
class="gallery-image"
data-flex-grow="621"
data-flex-basis="1491px"
>&lt;/p>
&lt;p>没想到竟然炸了，但好像又在意料之中。查了下这种情况是：操作系统对每个进程可以创建的线程数量有一定的限制。当 Go 程序尝试创建大量的 goroutine 时，每个 goroutine 最终可能需要一个操作系统线程来执行，一旦超过系统的线程数量限制，就会出现此错误。简而言之就是并发的 goroutine 太多了，我把并发量减少到 100，同时通过 &lt;code>trace&lt;/code> 包记录下运行时的数据方便后续分析，完整的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;trace.out&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">trace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">trace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Stop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">batchSize&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">batchSize&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">batchSize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">10000&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">filename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Done&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这次能成功运行了，会在当前目录下生成一个 &lt;code>trace.out&lt;/code> 文件，我们执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">go tool trace trace.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后根据提示打开浏览器就可以看到如下内容：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/trace-gmp.jpg"
width="3828"
height="1682"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/trace-gmp_hu_2e2a775d948611b3.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/trace-gmp_hu_e72e3dce1a41a284.jpg 1024w"
loading="lazy"
alt="trace GMP"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;p>点击彩色部分可以在底下看到相关的信息，例如上图中是某一时刻 goroutine 的情况，可以看到当前 G0 处于 &lt;code>GCWaiting&lt;/code> 状态，正在执行的 G 的 id 是 85，其他的暂时不展开了。通过 &lt;code>trace&lt;/code> 包我们可以通过可视化的方式对 GMP 有了大概的感知，接下来我们继续分析 GMP 的调度。 我们把 &lt;code>trace&lt;/code> 相关的代码去掉，把 G 的并发两加到 1000，然后通过 DEBUG 工具来分析：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-1.jpg"
width="1844"
height="354"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-1_hu_cec38e0f60cfc3c0.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-1_hu_684db1beba7edff4.jpg 1024w"
loading="lazy"
alt="GODEBUG"
class="gallery-image"
data-flex-grow="520"
data-flex-basis="1250px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">schedtrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">500&lt;/span> ./main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解释一下这个命令和输出的内容，这个命令是通过 debug 的方式启动 Go 程序，其中的 &lt;code>schedtrace&lt;/code> 是指定 debug 的内容为调度器相关的数据，500 表示的是每隔 500 毫秒打印一次信息。关于输出的内容：&lt;/p>
&lt;ul>
&lt;li>&lt;code>xxms&lt;/code> 表示程序启动到打印当前信息过去了多长时间。&lt;/li>
&lt;li>&lt;code>gomaxprocs&lt;/code> 表示最多会有多少个 P 来处理 G，默认为CPU 的核心数，可以通过环境变量 &lt;code>GOMAXPROCS&lt;/code> 和 &lt;code>runtime.GOMAXPROCS()&lt;/code>这个函数来调整。&lt;/li>
&lt;li>&lt;code>idleprocs&lt;/code> 表示处于空闲状态的 P 数量。&lt;/li>
&lt;li>&lt;code>threads&lt;/code> 表示正在运行的线程数量。&lt;/li>
&lt;li>&lt;code>spinningthreads&lt;/code> 表示处于自旋状态的线程的数量。在 Go 运行时的调度系统中，自旋是一种线程的状态，处于自旋状态的线程不会进入休眠，而是持续地检查是否有可执行的任务。&lt;/li>
&lt;li>&lt;code>needspinning&lt;/code> 是一个用于判断是否需要启动新的自旋线程的条件。Go 运行时的调度器会根据当前系统的状态和任务负载来决定是否需要创建新的自旋线程。&lt;/li>
&lt;li>&lt;code>idlethreads&lt;/code> 表示处于空闲状态的线程数量。&lt;/li>
&lt;li>&lt;code>runqueue&lt;/code> 表示全局队列中正在等待被执行的 G 的数量。&lt;/li>
&lt;li>[0 0 0 0 0 0 0 0] 表示每个 P 的本地队列中等待被执行的 G 的数量。数组的长度为 &lt;code>GOMAXPROCS&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>从上图可以观察到一个比较奇怪的现象：为什么数组里的元素的值都是 0，也就是说每个 P 的本地队列都是空的。稍加思索后，我想到可能是因为我设置了每隔 500 毫秒才打印一次信息，可能程序执行太快，500 毫秒后所有的 G 都已经执行完成或者正在执行中，所以本地队列里都是空的。我调成 100 毫秒后结果如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-2.jpg"
width="1932"
height="1148"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-2_hu_dd66432403937c1c.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-2_hu_73076a2dae63afaf.jpg 1024w"
loading="lazy"
alt="GODEBUG"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;p>从上图中可以看出：&lt;/p>
&lt;ul>
&lt;li>&lt;code>idleprocs&lt;/code> 的值在不断变化，但最大不会超过 &lt;code>gomaxprocs&lt;/code> 的值。&lt;/li>
&lt;li>&lt;code>threads&lt;/code> 稳定在 90 多，说明同时有 90 多个线程在工作。&lt;/li>
&lt;li>在全局队列几乎为 0 的情况下，各个 P 的本地队列数量之和是在逐步减少的，但是某个 P 的队列的数量会突然增多。&lt;/li>
&lt;/ul>
&lt;p>随后我又将 G 的并发调成 2000 进行调试，得到如下结果：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-3.jpg"
width="2176"
height="1300"
srcset="https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-3_hu_53014ecc927bc6d9.jpg 480w, https://www.blackmatch.cn/p/%E4%BB%8E%E5%9C%BA%E6%99%AF%E5%8E%BB%E7%90%86%E8%A7%A3-go-%E7%9A%84-gmp-%E6%A8%A1%E5%9E%8B%E9%82%A3%E6%88%91%E5%BC%80-10000-%E4%B8%AA-goroutine-%E4%BC%9A%E6%80%8E%E6%A0%B7/godebug-3_hu_48254ff68aca3ab5.jpg 1024w"
loading="lazy"
alt="GODEBUG"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>结合 GMP 的理论知识，我们可以得到以下结论：&lt;/p>
&lt;ul>
&lt;li>Go 会开启多线程去并发执行 goroutine，线程的数量会根据 goroutine 的数量进行调整。&lt;/li>
&lt;li>GMP 通过 &lt;strong>hand off 机制&lt;/strong>，当正在执行的 G 发生阻塞时，会把 G 与当前的 P 断开，将 P 及其本地队列重新绑定到一个休眠的 M 上或者新建一个 M 来绑定。可以从调试的结果中看出在执行到后期 &lt;code>idleprocs&lt;/code> 的值等于 &lt;code>gomaxprocs&lt;/code> 的值了，这是因为 G 执行的都是阻塞任务（读取文件），每个 G 经过 P 的短暂处理后就会跟 P 断开，所以程序执行到后面会有很多空闲的 P，G 都已经进入系统调用状态，最后被放入全局队列后最终被执行完成。&lt;/li>
&lt;li>GMP 通过 &lt;strong>work stealing 机制&lt;/strong>，当一个 P 的本地队列和全局队列都空了的时候，它就从其他 P 的队列中偷一些 G 过来放到自己的本地队列中。图中数组倒数第二个元素最后一个大于 0 的值为 54，这个值大于之前出现过的所有的值，就说明对应的 P 是从其他 P 的本地队列中偷了一部分 G 过来了。&lt;/li>
&lt;/ul>
&lt;p>综上，Go 的 GMP 模型使其能够最大限度地压榨 CPU 的性能，从而能够支撑更高的并发，提升程序的性能。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>刘丹冰 B 站视频&lt;/li>
&lt;li>&lt;a class="link" href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#65-%E8%B0%83%E5%BA%A6%E5%99%A8" target="_blank" rel="noopener"
>https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#65-%E8%B0%83%E5%BA%A6%E5%99%A8&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>关于 DeepSeek 的一些思考</title><link>https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link><pubDate>Sun, 23 Feb 2025 11:13:00 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid><description>&lt;h2 id="deepseek-为什么这么火">DeepSeek 为什么这么火
&lt;/h2>&lt;p>我印象中，过年前那几天，DeepSeek 就开始火起来了，当时我在家带娃，没有什么时间上网，但也能感受到 DeepSeek 的渗透。后来我查了一下，DeepSeek 是 1 月 11 号正式发布的，不到半个月的时间就家喻户晓，成为一款 “国民 AI 模型”。经过这段时间的使用和学习 DeepSeek，接下来谈谈我的一些看法。&lt;/p>
&lt;h3 id="模型本身的强大">模型本身的强大
&lt;/h3>&lt;p>普通人对大模型的认知，感觉短短两三年时间就从 “超出认知范围” 变成 “全民 AI” 的状态了。简单回顾一下，2022年底 ChatGPT 横空出世，紧接着 Gemini、Claude、Midjourney、Stable Defussion 等国外大模型也持续发力，国内有豆包、kimi等，还有很多很多我没有听说过的。不管是国外还是国内的大模型，这些模型都没有像 DeepSeek 渗透得这么彻底，我还记得 ChatGPT 刚发布没多久，我也是激情澎湃，还特意花 20 美元开了一个月会员，后来热情慢慢退去，再到后来使用频率越来越少了。这几天深入了解 DeepSeek 后，我认为它的强大之处在于：&lt;/p>
&lt;ul>
&lt;li>高性价比，用更少的算力，达到其他模型的效果，因此 DeepSeek 的定价会更低：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_v3_benchmark_hist_zh.jpeg"
width="3521"
height="2763"
srcset="https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_v3_benchmark_hist_zh_hu_a5569fb6d5ccaee9.jpeg 480w, https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_v3_benchmark_hist_zh_hu_91ffa24fb94ba95b.jpeg 1024w"
loading="lazy"
alt="DeepSeek 性能测试"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;blockquote>
&lt;p>DeepSeek-V3 多项评测成绩超越了 Qwen2.5-72B 和 Llama-3.1-405B 等其他开源模型，并在性能上和世界顶尖的闭源模型 GPT-4o 以及 Claude-3.5-Sonnet 不分伯仲。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_v3_price_zh.jpeg"
width="1280"
height="702"
srcset="https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_v3_price_zh_hu_751306bac0ca96e7.jpeg 480w, https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_v3_price_zh_hu_1675e0cd09a8059.jpeg 1024w"
loading="lazy"
alt="DeepSeek 价格"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;blockquote>
&lt;p>随着性能更强、速度更快的 DeepSeek-V3 更新上线，我们的模型 API 服务定价也将调整为每百万输入 tokens 0.5 元（缓存命中）/ 2 元（缓存未命中），每百万输出 tokens 8 元，以期能够持续地为大家提供更好的模型服务。&lt;/p>&lt;/blockquote>
&lt;p>上面是 DeepSeek V3 模型的性能测试和价格对比图，总结一下就是：&lt;strong>又能打又便宜&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>推理模型+开源&lt;/li>
&lt;/ul>
&lt;p>2025 年 1 月 20日，DeepSeek 推出了 DeepSeek-R1 模型，并宣布开源此模型。&lt;/p>
&lt;blockquote>
&lt;p>此次我们的开源仓库（包括模型权重）统一采用标准化、宽松的 MIT License，完全开源，不限制商用，无需申请。&lt;/p>&lt;/blockquote>
&lt;p>DeepSeek-R1 是一款推理能力强的大模型，性能对齐 OpenAI-o1 正式版。&lt;/p>
&lt;blockquote>
&lt;p>DeepSeek-R1 在后训练阶段大规模使用了强化学习技术，在仅有极少标注数据的情况下，极大提升了模型推理能力。在数学、代码、自然语言推理等任务上，性能比肩 OpenAI o1 正式版。&lt;/p>&lt;/blockquote>
&lt;p>从使用体验上，个人感觉 DeepSeek-R1 模型让我们从 prompt 工程师转变成甲方，以往的大模型需要各种引导，努力钻研提示词才能得到满意的答案，而 DeepSeek-R1 模型只需要向它清晰地描述需求即可，这样使得它更普惠，普通老百姓也能低门槛使用。&lt;/p>
&lt;p>由于 DeepSeek-R1 模型的开源，各家 AI 公司纷纷独立部署，推出 “满血版” DeepSeek-R1 模型，分担了官方的压力，同时也提高了 DeepSeek 的知名度。&lt;/p>
&lt;h3 id="接地气时势造英雄">接地气，时势造英雄
&lt;/h3>&lt;p>说来惭愧，我第一次听说 DeepSeek 是我的妻子告诉我的，过年前的某一天，我的妻子突然很兴奋的跟我说它用 DeepSeek 解决了某某问题，感觉很强大，极力推荐我去试试。随后我就立即去下载 App，&lt;strong>这款国产大模型使用上完全没有什么门槛，而且一推出就是完全免费使用&lt;/strong>。第一次使用给我眼前一亮的是，这个模型把思考过程都展示出来了，而且回答的内容很接地气。不久后，微信、小红书、B 站、抖音等等各种平台都出现了 DeepSeek 相关的内容，这些内容如洪水猛兽般冲进了我们的视野。&lt;/p>
&lt;p>一款大模型的流行，往往会滋生各种 “搞钱” 教程，各大平台开始出现铺天盖地的利用 DeepSeek 搞钱的教程，结合这几年市场日渐下滑的大形势，很多失业的人仿佛抓到了救命稻草，开始各种学习和推广 DeepSeek，我们抛开 “搞钱” 这个话题，至少学习和使用 DeepSeek 能缓解一部分人群的焦虑，这也给 DeepSeek 添了一把火。&lt;/p>
&lt;h3 id="各种推手">各种推手
&lt;/h3>&lt;p>除了各家 AI 公司独立部署的推波助澜以及各种 “搞钱” 教程的推动外，学术研究者们也出了一份力，最具代表性的就是有清华大学背书的一系列研究资料：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_learning_resources.jpg"
width="982"
height="336"
srcset="https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_learning_resources_hu_2b42760543984b0d.jpg 480w, https://www.blackmatch.cn/p/%E5%85%B3%E4%BA%8E-deepseek-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/ds_learning_resources_hu_426eadbc9b4f8bdd.jpg 1024w"
loading="lazy"
alt="DeepSeek 学习资料"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/p>
&lt;p>如图是我下载的学习资料，网上还有相对应的各种视频资源，甚至还有人通过卖这些资料来赚钱。这些 “权威” 的学习资料，激起了人们深入探索 DeepSeek 的热情。&lt;/p>
&lt;h2 id="对-deepseek-应该抱有怎样的心态">对 DeepSeek 应该抱有怎样的心态
&lt;/h2>&lt;p>相比其他大模型，我从来没有像 DeepSeek 这样去深入了解和学习过。通过这段时间的使用和学习，我对 DeepSeek 的心情从一开始的兴奋到慢慢平静下来，&lt;strong>我觉得不管是大模型的发展，还是个人的成长，都是一条有起伏的曲线，最难能可贵的是不忘初心，持之以恒&lt;/strong>。&lt;/p>
&lt;h3 id="学习使用但要避免过度依赖">学习使用，但要避免过度依赖
&lt;/h3>&lt;p>在 ”全民 DeepSeek“ 的情况下，使用和学习 DeepSeek 肯定是很有必要的，但是不能把它当成无所不能的利器，更不能把它当做逆天改命的神器。不管从事什么工作，过度神话过度依赖某个工具都不是很明智的做法。DeepSeek 只是众多 AI 工具中的一款，未来肯定还会有各种强大的 AI 工具诞生，工具的本质是&lt;strong>辅助&lt;/strong>，使用工具的&lt;strong>人&lt;/strong>才是创世者。&lt;/p>
&lt;h3 id="提升内核不忘初心">提升内核，不忘初心
&lt;/h3>&lt;p>AI 对各行各业的确产生了很大的冲击，“AI 取代员工” 也不完全是危言耸听，但永远不要忘了人类才是创世主， 世间万物每时每刻都在变化，不管外界如何变化，我们的 “魂” 不能变。每个人有每个人的 “魂”，干一行有一行的使命，车夫的使命是把乘客安全送达目的地，即使现在有了飞机、汽车、高铁，相关工作人员的使命也没有变过。与其担心被 AI 干掉，不如想想如何让 AI 帮助自己更好地完成使命，让 AI 帮助自己提升认知，磨练技能。&lt;strong>AI 不是敌人，懒惰和安于现状才是&lt;/strong>。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>清华大学公布的相关研究资料&lt;/li>
&lt;li>&lt;a class="link" href="https://api-docs.deepseek.com/zh-cn/news/news1226" target="_blank" rel="noopener"
>https://api-docs.deepseek.com/zh-cn/news/news1226&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://api-docs.deepseek.com/zh-cn/news/news250120" target="_blank" rel="noopener"
>https://api-docs.deepseek.com/zh-cn/news/news250120&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title> 归档</title><link>https://www.blackmatch.cn/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.blackmatch.cn/archives/</guid><description/></item><item><title> 请不要使用 require 引入单个文件</title><link>https://www.blackmatch.cn/p/%E8%AF%B7%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8-require-%E5%BC%95%E5%85%A5%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 11 Jun 2019 22:04:28 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E8%AF%B7%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8-require-%E5%BC%95%E5%85%A5%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>Node.js 的模块化是基于 CommonJS 规范实现的，我们通常会使用 &lt;code>module.exports&lt;/code> 来导出一个模块，用 &lt;code>require&lt;/code> 来引入一个模块。其实在 Node.js 中，一个文件就是一个模块，更多时候我们使用 &lt;code>require&lt;/code> 来引入一些 NPM 包。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;lodash&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// codes
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是有时候我们也需要引入一些文件，最常见的文件就是 &lt;code>.json&lt;/code> 文件，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="kr">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./package.json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// codes
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用这种方式引入单个文件在大多数情况下是可行的，但是如果引入的文件是一个可能会在程序启动后发生变化的文件就会有问题了。&lt;/p>
&lt;h2 id="require-的缓存机制">require 的缓存机制
&lt;/h2>&lt;p>当程序启动后， Node.js 会在当前进程缓存所有用 require 引入过的内容，并保存在全局对象 &lt;code>require.cache&lt;/code> 中。所以，如果使用 require 引入一个动态文件，在程序运行过程中就无法获取最新的文件内容了。&lt;/p>
&lt;p>我们来看一个测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 首次引用 config.json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">config1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./config.json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;first require config&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;require cache:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">require&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 修改 config.json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./config.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;config.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第二次引用 config.json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">config2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./config.json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;second require config&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>config.json&lt;/code> 文件中的内容为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;blackmatch&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">18&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">first require config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{ name: &amp;#39;blackmatch&amp;#39;, age: 18 }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">require cache:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{ &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/test.js&amp;#39;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Module {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: &amp;#39;.&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exports: {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> parent: null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> filename: &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/test.js&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> loaded: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [ [Object] ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> paths:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/blackmatch/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/node_modules&amp;#39; ] },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/config.json&amp;#39;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Module {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/config.json&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exports: { name: &amp;#39;blackmatch&amp;#39;, age: 18 },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> parent:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Module {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: &amp;#39;.&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exports: {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> parent: null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> filename: &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/test.js&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> loaded: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [Object],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> paths: [Object] },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> filename: &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/config.json&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> loaded: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> paths:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/require-cache-demo/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/blackmatch/demos/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/blackmatch/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/Desktop/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/blackmatch/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/Users/node_modules&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/node_modules&amp;#39; ] } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">second require config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{ name: &amp;#39;blackmatch&amp;#39;, age: 18 }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从输出结果可以看出：&lt;/p>
&lt;ul>
&lt;li>config.json 文件被缓存到了 require.cache 全局对象中了。&lt;/li>
&lt;li>在 config.json 文件被修改后，第二次使用 require 引入文件无法获取该文件最新的内容。&lt;/li>
&lt;/ul>
&lt;p>这就是 require 的缓存机制。&lt;/p>
&lt;h2 id="使用读取文件的方式引入动态文件">使用读取文件的方式引入动态文件
&lt;/h2>&lt;p>同样基于上面的例子，我们使用读取文件的方式引入 config.json，代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">test2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 首次引用 config.json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">str1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./config.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">config1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;first require config&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 修改 config.json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./config.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;config.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第二次引用 config.json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">str2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./config.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">config2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;second require config&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test2&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">first require config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{ name: &amp;#39;blackmatch&amp;#39;, age: 18 }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">second require config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{ name: &amp;#39;blackmatch&amp;#39;, age: 20 }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这次就能获取 config.json 最新的内容了。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>引入一个动态文件的场景比较少，但养成使用读取文件的方式来引入单个文件是个好习惯。&lt;/li>
&lt;li>由于 require 的缓存机制，在需要热更新的场景可能需要另辟蹊径，必要时重启进程。&lt;/li>
&lt;/ul></description></item><item><title>Node.js 中扩展内存那些事</title><link>https://www.blackmatch.cn/p/node.js-%E4%B8%AD%E6%89%A9%E5%B1%95%E5%86%85%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</link><pubDate>Mon, 10 Jun 2019 22:02:38 +0800</pubDate><guid>https://www.blackmatch.cn/p/node.js-%E4%B8%AD%E6%89%A9%E5%B1%95%E5%86%85%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>Node.js 使用的是 Google 的 V8 作为 JavaScript 脚本引擎，由于 V8 引擎的限制， Node.js 中只能使用部分内存：&lt;strong>64位操作系统下约为1.4G，32位操作系统下约为0.7G&lt;/strong>。对于浏览器来说，这样的限制影响不大，但是对于服务端程序来说有时候可能就不能满足需求了。虽然大内存的使用场景也相对较少，但还是会存在一些默认情况下非代码因素造成的内存溢出问题。&lt;/p>
&lt;h2 id="通用的解决方案">通用的解决方案
&lt;/h2>&lt;p>在网上搜到的大部分答案都是使用 &lt;code>--max_old_space_size&lt;/code> 这个 flag 来扩展 Node.js 可使用的最大的老生代的内存。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node --max_old_space_size&lt;span class="o">=&lt;/span>&lt;span class="m">2048&lt;/span> xxx.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>单位是 MB，比如上述例子是将最大可用内存扩展至 2G。&lt;/p>&lt;/blockquote>
&lt;p>如果你使用的是 Node8.x 及以上的版本，还可以通过 &lt;code>NODE_OPTIONS&lt;/code> 这个系统环境变量来配置，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">NODE_OPTIONS&lt;/span>&lt;span class="o">=&lt;/span>--max_old_space_size&lt;span class="o">=&lt;/span>&lt;span class="m">2048&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>必须要确认该系统环境变量已经生效了，可以用 &lt;code>echo $NODE_OPTIONS&lt;/code> 来校验。&lt;/p>
&lt;p>此外，&lt;strong>使用&lt;code>Buffer&lt;/code>不受 V8内存限制&lt;/strong>。&lt;/p>
&lt;h2 id="验证扩展内存是否生效">验证扩展内存是否生效
&lt;/h2>&lt;p>通过 &lt;code>v8&lt;/code> 模块的 &lt;code>getHeapStatistics()&lt;/code> 方法即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">v8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;v8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getHeapStatistics&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行 &lt;code>node --max_old_space_size=2048 test.js&lt;/code> 结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">total_heap_size&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">5009408&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">total_heap_size_executable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1048576&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">total_physical_size&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3449648&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">total_available_size&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2194521344&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">used_heap_size&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2411032&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">heap_size_limit&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2197815296&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">malloced_memory&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">8192&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">peak_malloced_memory&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">410288&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">does_zap_garbage&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中的 &lt;code>heap_size_limit&lt;/code> 就是老生代可以使用的最大内存，单位是 &lt;code>Byte&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>注意： Node8.x 以下版本使用这个方法有 bug：当设置的内存超过 3.7G 时，打印出来的结果是有问题的。&lt;/p>&lt;/blockquote>
&lt;h2 id="一些特殊情况">一些特殊情况
&lt;/h2>&lt;p>在实际的项目中，一般不会很简单的执行 &lt;code>node xxx.js&lt;/code> 来启动项目，有些可能通过 &lt;code>pm2&lt;/code> 等工具来部署，有些可能通过自己写的 npm 命令行工具来启动，而恰好这个时候使用的 Node.js 版本是低于 8.x 版本，这种情况下就只剩下添加 &lt;code>--max_old_space_size&lt;/code> 这个 flag 来扩展内存了，但是怎么加还是有讲究的，比如一个 npm 命令行模块的入口文件的第一行通常是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/bin/env node
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样子的，所以我们很容易就想到：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/bin/env node --max_old_space_size=2048
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这样的方式来扩展内存，但事实上这种方式是有很大的局限性，甚至还有可能导致程序卡死。比如如果源代码这样写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/env node --max_old_space_size=2048
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ch">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">program&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;commander&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">program&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;0.1.0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// start process...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">program&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假设我们这个包名叫 &lt;code>blog&lt;/code>，在服务器上全局安装这个包后执行 &lt;code>blog start&lt;/code> 命令就能将程序启动起来。&lt;/p>
&lt;p>但是，事与愿违，其实在服务器上执行 &lt;code>blog start&lt;/code> 的时候，真正执行的是 &lt;code>blog --max_old_space_size=2048&lt;/code>，&lt;code>start&lt;/code> 这个参数无法传递下去，因为已经被 &lt;code>--max_old_space_size=2048&lt;/code> 这个 flag 占用了。这是 &lt;code>#!&lt;/code> 写法的一个特性。&lt;/p>
&lt;h2 id="使用-hack-技巧解决特殊情况">使用 hack 技巧解决特殊情况
&lt;/h2>&lt;p>针对上述的特殊情况，曾经有人向 Node.js 提过一个 &lt;a class="link" href="https://github.com/smikes/node/blob/minus-x-switch/doc/Minus-X-Switch-Proposal.md" target="_blank" rel="noopener"
>PR&lt;/a>，但是后来发现，不需要 Node 做任何修改，使用 shell 的 hack 技巧就能解决，具体如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ch">&lt;/span>&lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="c1">//# comment; exec /usr/bin/env node --max_old_space_size=2048 &amp;#34;$0&amp;#34; &amp;#34;$@&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">program&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;commander&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">program&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;0.1.0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// start process...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">program&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解释一下：&lt;/p>
&lt;ul>
&lt;li>第一行是指定使用 &lt;code>sh&lt;/code>shell。&lt;/li>
&lt;li>第二行其实分为两个部分：&lt;code>&amp;quot;:&amp;quot; //# comment;&lt;/code> 和 &lt;code>exec /usr/bin/env node --max_old_space_size=2048 &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;&lt;/code>。前半部分是 &lt;a class="link" href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins" target="_blank" rel="noopener"
>Bourne Shell&lt;/a> 内置支持的写法，只需要了解 &lt;code>#&lt;/code> 和 &lt;code>;&lt;/code> 之间是可以写注释的就行了；后半部分是使用 Node 执行相关的命令，&lt;code>$0&lt;/code> 传递一个参数 0 ，&lt;code>$@&lt;/code> 传递其他额外的参数。&lt;/li>
&lt;/ul>
&lt;p>这样，就能正常传递参数了。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;p>&lt;a class="link" href="http://sambal.org/2014/02/passing-options-node-shebang-line/" target="_blank" rel="noopener"
>http://sambal.org/2014/02/passing-options-node-shebang-line/&lt;/a>&lt;/p></description></item><item><title> 浅谈 MySQL 中的大小写敏感问题</title><link>https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 23 Apr 2019 22:00:11 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>MySQL 中的大小写敏感问题，可以从服务器 (Server)、数据库 (Database)、表 (Table)、字段 (Column) 这 4 个级别来配置， MySQL 的很多配置、操作等都是基于这 4 个级别的。&lt;strong>这4个级别的优先级为：字段&amp;gt;表&amp;gt;数据库&amp;gt;服务器&lt;/strong>。而我们最关注的大小写敏感问题通常是对于数据而言的，举个简单的例子：字符串 &lt;code>book&lt;/code> 和字符串 &lt;code>Book&lt;/code> 存入到数据库后，我们通过 SQL 语句查询的时候，如果这两个字符串是相等的，那么说明 MySQL 比较这两个字符串的时候采用了 &lt;strong>大小写不敏感&lt;/strong> 的方式，反之，则是使用了 &lt;strong>大小写敏感&lt;/strong> 的方式。在讨论 MySQL 大小写敏感问题之前，我们需要先了解 MySQL 的两个概念：字符集 (CHARACTER SET) 和校对规则 (Collation)。&lt;/p>
&lt;h2 id="字符集-character-set-和校对规则-collation">字符集 (CHARACTER SET) 和校对规则 (Collation)
&lt;/h2>&lt;p>字符集的通常解释是：符号和编码的集合。举个例子：假设我们有 4 个字母： A,B,a,b。我们给每个字母编个号码： A=0,B=1,a=3,b=4 。我们就可以说字母 A 是符号，编号 0 是它的编码。所有的字母和它们的编码组合起来就是我们通常说的字符集。如果我们想要比较两个字符串 A 和 B 的值的大小，那么我们很容就想到他们的编码， A 的编码是 0 ， B 的编码是 1 ，因为 &lt;strong>0小于1&lt;/strong>，所以 &lt;strong>字符串 A 小于字符串 B&lt;/strong>。我们做的这个比较就是给这个 &lt;strong>字符集(CHARACTER SET)&lt;/strong> 应用了一套 &lt;strong>校对规则(Collation)&lt;/strong>。&lt;/p>
&lt;p>MySQL 拥有一套完整的字符集和校对规则。每一种字符集至少包含一种校对规则，且每种字符集都有默认的校对规则。&lt;/p>
&lt;ul>
&lt;li>可以使用 &lt;code>SHOW CHARACTER SET&lt;/code> 语句查看 MySQL 支持的字符集列表：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/show_character_set.png"
width="431"
height="390"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/show_character_set_hu_984ba3d00b7b4754.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/show_character_set_hu_9ca75d79acc1be6d.png 1024w"
loading="lazy"
alt="show_character_set"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;ul>
&lt;li>可以使用 &lt;code>SHOW COLLATION&lt;/code> 语句查看 MySQL 支持的校对规则：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/show_collation.png"
width="617"
height="384"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/show_collation_hu_1b6504101556ff6a.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/show_collation_hu_973f370a694fa177.png 1024w"
loading="lazy"
alt="show_collation"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;h2 id="大小写敏感问题">大小写敏感问题
&lt;/h2>&lt;p>接着上面的例子，如果我们想要大写字母 A 和小写字母 a 是相等的呢？那么我们需要做的就是将大写字母 A 和小写字母 a 的编码设置为一致的，然后比较它们的编码即可。这就是我们通常说的 &lt;strong>大小写不敏感校对规则&lt;/strong>。反之，如果将大写字母 A 和小写字母 a 视为不相等的，就是我们通常说的 &lt;strong>大小写敏感校对规则&lt;/strong>。&lt;/p>
&lt;p>在不指定字符集和校对规则的情况下， MySQL 会使用默认的字符集 (utf8) 和校对规则 (utf8_general_ci)。校对规则的名称遵循规则：&lt;strong>以其相关的字符集开头，后加上一个或者多个后缀用于区分不同的校对规则&lt;/strong>。相关后缀说明：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>后缀&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_ai&lt;/td>
&lt;td>口音不敏感 (Accent insensitive)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_as&lt;/td>
&lt;td>口音敏感 (Accent sensitive)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_ci&lt;/td>
&lt;td>大小写不敏感 (Case insensitive)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_cs&lt;/td>
&lt;td>大小写敏感 (case-sensitive)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_ks&lt;/td>
&lt;td>假名敏感 (Kana sensitive)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_bin&lt;/td>
&lt;td>二进制 (Binary，大小写敏感 )&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>由此可以知道：&lt;strong>默认情况下，MySQL 所使用的校对规则是大小写不敏感的&lt;/strong>。&lt;/p>
&lt;h2 id="设置大小写敏感">设置大小写敏感
&lt;/h2>&lt;p>在日常的开发场景中，可能很少遇到需要设置大小写敏感的场景，而我恰巧遇到了。下面举例说明：&lt;/p>
&lt;ul>
&lt;li>先创建一张用户表：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">nickname&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>这里我们先使用默认的字符集和校对规则。&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>插入两条数据：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">cs_test&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">nickname&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;user1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">cs_test&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">nickname&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;user2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;match&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>查询数据：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;user1&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;usER1&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两条 SQL 语句的查询结果是一致的：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user.png"
width="479"
height="203"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_hu_86f3849f91798a56.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_hu_643224c4ed1556fb.png 1024w"
loading="lazy"
alt="query_user"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="566px"
>&lt;/p>
&lt;ul>
&lt;li>现在我需要向&lt;code>users&lt;/code>表中插入一条&lt;code>username&lt;/code>为&lt;strong>useR1&lt;/strong>的&lt;strong>另外一个用户&lt;/strong>，发现报错了：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">cs_test&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">nickname&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;useR1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;whatever&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/insert_error.png"
width="563"
height="386"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/insert_error_hu_801a8bf0f5a8c888.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/insert_error_hu_92bb4d0917904d97.png 1024w"
loading="lazy"
alt="insert_error"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="350px"
>&lt;/p>
&lt;p>理由很简单：因为 MySQL 此时使用的是大小写不敏感的校对规则，所以 &lt;code>user1&lt;/code> 和 &lt;code>useR1&lt;/code> 是相等的，而 &lt;code>username&lt;/code> 是 &lt;code>users&lt;/code> 表的 &lt;strong>主键&lt;/strong>，所以在插入数据时会报主键冲突的错误。&lt;/p>
&lt;ul>
&lt;li>设置&lt;code>users&lt;/code>表的&lt;code>username&lt;/code>字段使用&lt;strong>大小写敏感&lt;/strong> 的校对规则：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">cs_test&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">CHANGE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COLUMN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">CHARACTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COLLATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;utf8_bin&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后再次尝试插入数据，这次插入成功了。此时 &lt;code>users&lt;/code> 表中的数据如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/users.png"
width="281"
height="229"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/users_hu_d644415624537240.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/users_hu_f19b98c9576f0c66.png 1024w"
loading="lazy"
alt="users"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;ul>
&lt;li>再次查询用户表：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_1.png"
width="423"
height="173"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_1_hu_5bf3c7108fea619f.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_1_hu_e90e5a03082450eb.png 1024w"
loading="lazy"
alt="query_user_again_1"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="586px"
>&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_2.png"
width="459"
height="195"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_2_hu_c3966d6b0c5d8094.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_2_hu_c334c42fa696a5f8.png 1024w"
loading="lazy"
alt="query_user_again_2"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_3.png"
width="494"
height="204"
srcset="https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_3_hu_3d4ebffc7f64c2a7.png 480w, https://www.blackmatch.cn/p/%E6%B5%85%E8%B0%88-mysql-%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/query_user_again_3_hu_73cf33efc75cbb6b.png 1024w"
loading="lazy"
alt="query_user_again_3"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>发现这次 &lt;code>users&lt;/code> 表的 &lt;code>username&lt;/code> 字段已经彻底变成了 &lt;strong>大小写敏感&lt;/strong> 了。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>本文讨论的是 MySQL 数据校对规则的大小写敏感问题，而不是讨论表名的大小写敏感问题（网上很多文章都是讨论表名的大小写敏感问题）。&lt;/li>
&lt;li>对 MySQL 的字符集和校对规则有一定的了解后有助于理解大小写敏感问题。&lt;/li>
&lt;li>MySQL 的 &lt;code>utf8&lt;/code> 字符集并没有 &lt;code>utf8_general_cs&lt;/code> 校对规则，网上有些文章存在误导。&lt;/li>
&lt;li>MySQL 的 &lt;code>utf8_bin&lt;/code> 校对规则是大小写敏感的。&lt;/li>
&lt;li>MySQL 的 4 个级别优先级为：字段 (Column)&amp;gt; 表 (Table)&amp;gt; 数据库 (Database)&amp;gt; 服务器 (Server)，进行相关配置时尤其要注意。&lt;/li>
&lt;li>最好不要对主键等其他含有索引的字段设置大小写敏感，容易导致索引失效，从业务角度考虑也不太合理。&lt;/li>
&lt;/ul></description></item><item><title> 在 Linux 系统上通过二进制包安装 Node.js</title><link>https://www.blackmatch.cn/p/%E5%9C%A8-linux-%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%80%9A%E8%BF%87%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%AE%89%E8%A3%85-node.js/</link><pubDate>Tue, 16 Apr 2019 21:57:25 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E5%9C%A8-linux-%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%80%9A%E8%BF%87%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%AE%89%E8%A3%85-node.js/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>Linux 有很多个发行版本，不同的发行版本有不同的包管理工具。为了安装指定的 Node.js 版本，有时候需要花一些精力找攻略或者安装额外的包管理工具等，有些包管理工具并没有最新的 Node.js 版本。所以，如果是 Linux 系统，索性直接使用编译好的二进制文件进行安装是最省心省力的。&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;ul>
&lt;li>下载指定版本的二进制文件&lt;/li>
&lt;/ul>
&lt;p>在 Node.js 官方的发布网站 &lt;a class="link" href="https://nodejs.org/dist/" target="_blank" rel="noopener"
>https://nodejs.org/dist/&lt;/a> 下载合适的二进制包，比如我要安装 &lt;code>v11.14.0&lt;/code> 版本，我需要下载二进制包为 &lt;a class="link" href="https://nodejs.org/dist/v11.14.0/node-v11.14.0-linux-x64.tar.gz" target="_blank" rel="noopener"
>node-v11.14.0-linux-x64.tar.gz&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>解压文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">tar -xvf node-v11.14.0-linux-x64.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>拷贝文件到指定目录&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo cp -r node-v11.14.0-linux-x64/* /usr/local/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>测试是否安装成功&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@blackmatch:~# node -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">v11.14.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@blackmatch:~# npm -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6.7.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@blackmatch:~# npx -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6.7.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>二进制包一定要下载合适的（比如 x64 、 x86 ）等。&lt;/li>
&lt;li>安装完成后如果相关命令不生效，请重新打开一个终端即可生效。&lt;/li>
&lt;/ul></description></item><item><title> 记一次从 Oracle 数据库取 BLOB 数据遇到的坑</title><link>https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%8E-oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%96-blob-%E6%95%B0%E6%8D%AE%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link><pubDate>Tue, 12 Mar 2019 21:54:03 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%8E-oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%96-blob-%E6%95%B0%E6%8D%AE%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid><description>&lt;h2 id="需求">需求
&lt;/h2>&lt;p>![requirement]({{ site.url }}/images/oracle-blob-buffer/requirement.jpg)&lt;/p>
&lt;p>源库中的数据是以 &lt;code>BLOB&lt;/code> 的形式存储的，且数据中含有中文， MySQL 数据库的字符集为 &lt;code>utf8&lt;/code>，最终想要的效果就是在浏览器中以文本的形式展示源库中的数据。为了实现这一需求，尝试了 2 种方案：&lt;/p>
&lt;ul>
&lt;li>从 Oracle 层面解决，通过视图将相关字段转换成 &lt;code>VARCHAR2&lt;/code> 类型后在返回，这样从 Oracle 中查询数据的时候，直接拿到的就是字符串类型的数据。这样做的弊端是： Oracle 数据库 VARCHAR2 类型最大只能支持 4kb，如果超过了这个大小就会出错。&lt;/li>
&lt;li>从 Oracle 取到数据后，使用 Node.js 转换成字符串后再存入到 MySQL 数据库中。&lt;/li>
&lt;/ul>
&lt;p>我使用了第 2 种解决方案，但是过程并不是很顺利。&lt;/p>
&lt;h2 id="遇到的问题">遇到的问题
&lt;/h2>&lt;p>从 Oracle 数据库中取到的数据，在 Node.js 中是 &lt;code>Buffer&lt;/code> 对象，要将 Buffer 对象转换成字符串对 Node.js 来说实在是太常规了，直接 &lt;code>buffer.toString&lt;/code> 就完事了，可事实并非如此，得到的字符串都是乱码。一般遇到这个问题，大家的第一反应肯定是编码问题，我也是这么想的，考虑到数据中有中文，而 Node.js 原生并没有支持中文的相关编码，默认是 &lt;code>utf8&lt;/code>，已经尝试过了。所以就引入了 &lt;a class="link" href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="noopener"
>iconv-lite&lt;/a> 这个模块，用来对 Buffer 对象进行解码，但是 Oracle 中使用的字符集是 &lt;code>SIMPLIFIED CHINESE_CHINA.ZHS32GB18030&lt;/code>，所以我想当然的就使用 &lt;code>GB18030&lt;/code> 编码来解码，代码示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">iconv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;iconv-lite&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Convert from an encoded buffer to js string.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">iconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;gb18030&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果得到的字符串还是乱码，然后我又把 iconv-lite 支持的所有中文编码又试了一遍，得到的字符串全都是乱码。&lt;/p>
&lt;h2 id="解决">解决
&lt;/h2>&lt;p>经过一番 Google 和尝试后仍然没有解决，然后就在上述提到的两种方案之间来回折腾。后来在朋友的引导下，得到了一个思路：先探测 Buffer 对象的编码，得到确定的编码后，再进行解码。于是乎就找到了这个模块：&lt;a class="link" href="https://github.com/sonicdoe/detect-character-encoding" target="_blank" rel="noopener"
>detect-character-encoding&lt;/a>。这个模块主要是用来探测字符编码的，使用方法也很简单，示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">detectCharacterEncoding&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;detect-character-encoding&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fileBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;file.txt&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">charsetMatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">detectCharacterEncoding&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileBuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">charsetMatch&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// encoding: &amp;#39;UTF-8&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// confidence: 60
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>于是乎就用这个模块对上述提到的 Buffer 对象进行探测，得到的编码竟然是 &lt;code>UTF-16LE&lt;/code>，然后使用这个编码进行解码，果然得到了正确的字符串。问题到此彻底解决了。&lt;/p>
&lt;h2 id="注意事项">注意事项
&lt;/h2>&lt;ul>
&lt;li>探测编码时请多用一些数据样例来探测，最后使用可信度最高的编码。&lt;/li>
&lt;li>千万不要动态探测编码，然后动态解码，因为这个模块的探测结果是随着数据的变化而变化的。&lt;/li>
&lt;li>使用 iconv-lite 模块解码时，如果编码名称中有字母，请一律使用小写字母。&lt;/li>
&lt;li>一定要确保从 Oracle 取到的数据在 Node.js 环境中为 Buffer 对象。&lt;/li>
&lt;/ul>
&lt;h2 id="其他说明">其他说明
&lt;/h2>&lt;ul>
&lt;li>连接 Oracle 使用的模块是 &lt;a class="link" href="https://github.com/oracle/node-oracledb" target="_blank" rel="noopener"
>oracledb&lt;/a>&lt;/li>
&lt;li>连接 MySQL 使用的模块是 &lt;a class="link" href="https://github.com/tgriesser/knex" target="_blank" rel="noopener"
>knex&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>这次遇到的问题，其实解决方案是比较清晰的，但是在对 Buffer 进行解码遇到问题后没有冷静下来分析，在 2 个解决方案之间来回折腾浪费了很多时间；当已经很明确问题出现在哪个环节时，应该借助相关工具进一步确认问题的根源所在，比如：这次在解码环节出现了问题，而问题的根源也比较清晰，就是解码时使用的编码不对，所以就应该先明确 Buffer 对象所使用的编码，然后再用正确的编码进行解码即可。&lt;/p></description></item><item><title> 再见 2018</title><link>https://www.blackmatch.cn/p/%E5%86%8D%E8%A7%81-2018/</link><pubDate>Sun, 30 Dec 2018 21:51:55 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E5%86%8D%E8%A7%81-2018/</guid><description>&lt;p>转眼间， 2018 年马上就要过去，以前从来没有总结自己过去一年的习惯，那就从今年开始吧。我对自己 2018 年的总体表现是：&lt;strong>不太满意&lt;/strong>。在技术上虽然有了比较明确的方向和目标，但是大部分都没能达到理想的结果。原因就只有一个字：&lt;strong>懒&lt;/strong>！但不管怎样，人总是会随着时间的推移不断成长的，所以经常对自己的过去进行反思和总结也是有必要的。只有更加认清自己，才能走得更快走得更远。所以我主要想好好总结一下自己这一年的成长和不足。主要分为两方面：技术和其他软技能。&lt;/p>
&lt;h2 id="技术成长">技术成长
&lt;/h2>&lt;p>我对自己 2018 年的期望是：&lt;strong>在 Node.js、后端、架构能力上有较大的提升&lt;/strong>。首先聊聊 &lt;code>Node.js&lt;/code>，毕竟这是我吃饭的技术。感觉自己今年在 &lt;code>Node.js&lt;/code> 上没有多大的进步，除了工作中使用到的技术比较熟悉外，其他方面没有深入去学习，工作中使用的技术也比较有局限性。对 &lt;code>Node.js&lt;/code> 底层的东西没有入去学习，比如 &lt;strong>事件循环&lt;/strong>、&lt;strong>Emitter&lt;/strong>、&lt;strong>Stream&lt;/strong>、&lt;strong>V8&lt;/strong> 等，虽然在工作中能熟练运用，但对原理却说不出个所以然。其次是后端能力，这一年 &lt;strong>主要提高的是数据库方面的能力&lt;/strong>，对 SQL 性能优化、 MySQL、 DB2 有了更深入的理解，在 SQL 性能调优方面积累了一些经验，但是还有很多需要学习，当前对我来说最重要的就是服务器性能监控和调优以及前后端交互优化方面的技术。最后是架构能力，算是小有收获吧。至少对一些架构概念有了初步的了解，比如 &lt;strong>高可用&lt;/strong>、&lt;strong>高性能&lt;/strong>、&lt;strong>双机架构&lt;/strong>、&lt;strong>架构相关方法论&lt;/strong> 等。还是罗列一下我在 2018 年在工作之余都做了什么吧。代码相关的大部分都放在 &lt;strong>GitHub&lt;/strong> 了，这一年主要写了这些：&lt;/p>
&lt;p>![github-contribute-2018]({{ site.url }}/images/goodbye-2018/github-contribute-2018.jpg)&lt;/p>
&lt;ul>
&lt;li>用 &lt;code>Node.js&lt;/code> 写了一个少儿不宜的爬虫 :joy: ，项目地址：&lt;a class="link" href="https://github.com/blackmatch/pornhub-downloader" target="_blank" rel="noopener"
>blackmatch/pornhub-downloader&lt;/a>，这个竟然还是 star 最多的。。。真是无心插柳柳成荫，该项目更新到第二个版本已经停止维护的，毕竟我的初心是练习 Node.js 相关技术，确实也是这个项目学到的东西最多，比如 HTTP 代理、 Range 请求等。&lt;/li>
&lt;li>写了一个生成我国最新省市县行政区域的工具，项目地址：&lt;a class="link" href="https://github.com/blackmatch/mockz" target="_blank" rel="noopener"
>blackmatch/mockz&lt;/a>，踩了一些高并发请求的坑。&lt;/li>
&lt;li>翻译了两篇&lt;strong>Node.js 最佳实践&lt;/strong> 的文章，项目地址：&lt;a class="link" href="https://github.com/i0natan/nodebestpractices" target="_blank" rel="noopener"
>i0natan/nodebestpractices&lt;/a>，这是一个很好的项目，里面有很多 &lt;code>Node.js&lt;/code> 最佳实践的文章。&lt;/li>
&lt;li>其他还有一些杂七杂八不值一提的东西，比如使用 docker 搭建 gitlab、 gogs 等教程。&lt;/li>
&lt;/ul>
&lt;p>当然，这些都是一些很微不足道的东西，但是总比什么都不做好。至少慢慢养成了动手实践，坚持写作的习惯。虽然写的东西都是很轻量的，但是其中也会遇到一些棘手的问题，如果能寻根问题，也能学到很多。其实我写的这些项目中还有一些没有解决、没有弄懂的问题，所以，&lt;strong>把每一件小事做到极致也能有所收获&lt;/strong>。&lt;/p>
&lt;h2 id="其他软技能">其他软技能
&lt;/h2>&lt;p>程序员除了在技术上要有一技之长，软实力也不可小觑。比如：沟通能力、协调能力、学习方法、眼界等。在这一年，自己的学习方法和看问题的深度有了一定的提高。学习方法都是因人而异的，有人喜欢直接刚源码，有人喜欢看视频，有人喜欢看书看文档看别人的代码等，找到适合自己的方法就是最好的方法，最关键的一点是：&lt;strong>要行动起来&lt;/strong>。我比较喜欢的学习方法是：先过一遍官方文档，然后看看视频，然后做一些小的功能或者项目，逐渐深入。程序员在项目中遇到问题时，思考的方向容易受到束缚，很容易就往技术方向去思考，比如针对新需求或者需求变更时，往往会先从技术实现上先想一遍，然后才会关注需求的合理性和相关细节，这样会一定程度上带入自己的主观意识，甚至和产品干起来。所以，思考问题时，要学会多换位思考，不要被技术束缚了，不要忘了：&lt;strong>技术是用来满足需求的&lt;/strong>。&lt;/p>
&lt;h2 id="展望未来">展望未来
&lt;/h2>&lt;p>程序员几乎无一例外的都需要面临一个问题：&lt;strong>技术的日新月异&lt;/strong>。唯一的解决方法就是：&lt;strong>不断学习，不断成长&lt;/strong>。在即将到来的 2019 年，我不会给自己立什么 flag，只希望自己 &lt;strong>不要太懒&lt;/strong>，朝着目标和方向默默努力就行了，行动才是成败的关键。共勉。&lt;/p></description></item><item><title> 或许你真的不需要 moment.js</title><link>https://www.blackmatch.cn/p/%E6%88%96%E8%AE%B8%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%B8%8D%E9%9C%80%E8%A6%81-moment.js/</link><pubDate>Mon, 17 Dec 2018 21:49:43 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E6%88%96%E8%AE%B8%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%B8%8D%E9%9C%80%E8%A6%81-moment.js/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/moment/moment/" target="_blank" rel="noopener"
>momentjs&lt;/a> 是一个很流行的处理日期、时间的库，这个库提供了很多友好的方法，方便开发者对日期时间进行比较、格式化等操作。然而，由于这个库是基于面向对象的思维逻辑设计的，每一个 moment 对象会自带很多属性和方法，在进行相关的操作时会进行很多校验、转换等操作，所以在对性能比较敏感的程序中可能会存在一定的问题，特别是在循环语句中，性能问题可能更加突出。&lt;/p>
&lt;p>我在实际的项目中就遇到过在循环语句中使用 &lt;code>momentjs&lt;/code> 导致性能问题的情景：从一个数组中取出符合条件的元素，条件之一是需要对元素的某个日期时间属性作判断，使用到了 &lt;code>momentjs&lt;/code> 的 &lt;code>.isAfter&lt;/code> 方法，数组中有 4 百多个元素，每次遍历一个元素需要 80ms，所以完成整个遍历需要 30 多秒，虽然使用场景不是提供 API 接口，但这也是很难接受的。后来换成了 &lt;code>JavaScript&lt;/code> 原生的方法，每遍历一个元素只需要不到 2ms，遍历所有的元素不到一秒就完成了，性能瞬间就提升了。说明：我仅仅是修改了日期时间比较的代码，其他没有做任何优化。&lt;/p>
&lt;h2 id="简单测试">简单测试
&lt;/h2>&lt;p>我们可以简单的测试一下 &lt;code>momentjs&lt;/code> 和原生的 &lt;code>JavaScript&lt;/code> 方法之间的性能差异，测试代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">debug&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;debug&amp;#39;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s1">&amp;#39;moment-demo&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">moment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;moment&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">ts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">n1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">n2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">n1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">n2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ts&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">n1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">24&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ts&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">n2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">24&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`items len: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arr1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">iLen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">iLen&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">moment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time2&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">isAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`arr1 len: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">arr1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">iLen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">iLen&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time2&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">t2&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">t1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`arr2 len: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">arr2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试结果如下：&lt;/p>
&lt;p>![debug]({{ site.url }}/images/you-dont-need-momentjs/debug.jpg)&lt;/p>
&lt;blockquote>
&lt;p>从结果可以看出，&lt;code>momentjs&lt;/code> 在性能上确实逊色于原生的 &lt;code>JavaScript&lt;/code> 方法。&lt;/p>&lt;/blockquote>
&lt;h2 id="相关库的比较">相关库的比较
&lt;/h2>&lt;p>其实， github 上已经有一个项目专门分析 &lt;code>momentjs&lt;/code> 与其他日期时间处理库的各项对比，项目地址在 &lt;a class="link" href="https://github.com/you-dont-need/You-Dont-Need-Momentjs" target="_blank" rel="noopener"
> 这里 &lt;/a>。一个简要对比如图：&lt;/p>
&lt;p>![vs]({{ site.url }}/images/you-dont-need-momentjs/vs.jpg)&lt;/p>
&lt;h2 id="我的建议">我的建议
&lt;/h2>&lt;p>如果你只是用 &lt;code>momentjs&lt;/code> 中的两三个方法，则完全可以考虑使用其他更加轻量、性能更加好的库，或者使用 &lt;code>JavaScript&lt;/code> 原生的方法，必要时封装一下即可。如果程序对性能有较高的要求，最好不要使用 &lt;code>momentjs&lt;/code>。&lt;/p></description></item><item><title> 使用 Node.js 进行高并发请求时需要注意 DNS 解析问题</title><link>https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-node.js-%E8%BF%9B%E8%A1%8C%E9%AB%98%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F-dns-%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 13 Oct 2018 21:47:00 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-node.js-%E8%BF%9B%E8%A1%8C%E9%AB%98%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F-dns-%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>我们可以使用 Node.js 的 &lt;code>http&lt;/code> 模块进行网络请求，比如使用 &lt;code>http.get&lt;/code> 方法进行 &lt;strong>GET&lt;/strong> 请求。当时在高并发请求的情况下，很容易出现如下的错误：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">Error: getaddrinfo ENOTFOUND www.baidu.com www.baidu.com:80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者是这样的错误：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">Error: queryA ETIMEOUT www.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at QueryReqWrap.onresolve [as oncomplete] (dns.js:197:19)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两个错误都和 &lt;code>DNS&lt;/code> 解析有关。&lt;/p>
&lt;h2 id="一种解决方案">一种解决方案
&lt;/h2>&lt;p>在 Google 搜索一番就会找到如下的解决方案：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">opts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;www.baidu.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">family&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle the response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关键点是在请求的时候添加了 &lt;code>family&lt;/code> 这个参数，我们先来看一下这个参数的官方解释：&lt;/p>
&lt;blockquote>
&lt;p>family &lt;number> IP address family to use when resolving host and hostname. Valid values are 4 or 6. When unspecified, both IP v4 and v6 will be used.&lt;/p>&lt;/blockquote>
&lt;p>大概的意思是：这个参数可以指定解析 &lt;code>host&lt;/code> 和 &lt;code>hostname&lt;/code> 的时候所使用的 IP 地址族。可接受的参数为 &lt;code>4&lt;/code> 和 &lt;code>6&lt;/code> 。如果不指定，会同时使用 IP-v4 和 IP-v6 。&lt;/p>
&lt;p>所以，这种解决方案就是让 Node 在调用 &lt;code>dns&lt;/code> 模块解析域名的时候，指定使用 IP-v4 。这样能够在一定程度上解决问题。为什么说们说是一定程度上呢？因为经过我的验证，当请求并发量继续增大的时，还是会存在问题。&lt;/p>
&lt;h2 id="一些猜想">一些猜想
&lt;/h2>&lt;p>Node 使用 &lt;code>dns&lt;/code> 模块来提供域名解析服务，当我们调用 &lt;code>http&lt;/code> 、 &lt;code>net&lt;/code> 等相关模块时，也会使用到 &lt;code>dns&lt;/code> 模块来进行相关的操作。当然，&lt;code>dns&lt;/code> 模块也可以单独使用，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">dns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;dns&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dns&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;www.baidu.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">addresses&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`i: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addresses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">run&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那为什么高并发请求的时候会出现问题呢？我的猜想是：&lt;code>dns&lt;/code> 模块对域名解析有一定的性能限制，当并发量达到一定程度时，就会出现超时，从而导致各种问题。那为什么使用 IP-v4 就能得到一定程度的改善呢？我的猜想是：默认情况下，&lt;code>dns&lt;/code> 模块使用的是 IP-v4 和 IP-v6 进行域名解析，在切换解析规则时或者使用不同的规则对性能有一定的依赖，当指定使用 IP-v4 的时候，能够使得 &lt;code>dns&lt;/code> 模块发挥最佳的性能，从而使问题得到一定的改善。&lt;/p>
&lt;h2 id="一些建议">一些建议
&lt;/h2>&lt;p>在一些高并发请求的场景（比如爬虫）下，很有可能会导致 DNS 无法正常解析的问题，比如使用 &lt;code>request&lt;/code> 模块进行高并发请求的时候也会出现问题。除了上述提到的解决方案外，还应该合理控制好并发量。此外，也可以尝试使用高性能的 DNS 服务器来提供 DNS 解析的效率。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;p>&lt;a class="link" href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="noopener"
>http://www.ruanyifeng.com/blog/2016/06/dns.html&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nodejs/node/issues/1644" target="_blank" rel="noopener"
>https://github.com/nodejs/node/issues/1644&lt;/a>&lt;/p></description></item><item><title> 使用 docker-compose 搭建 gitlab</title><link>https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/</link><pubDate>Wed, 03 Oct 2018 21:40:04 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>前段时间，我写了一篇《&lt;span data-type="color" style="color:rgb(51, 51, 51)">&lt;span data-type="background" style="background-color:rgb(255, 255, 255)"> 使用 Gogs 搭建自己的 Git 服务 &lt;/span>&lt;/span>》，结果大家都不太看好 Gogs，我在使用 Gogs 几天后，感觉是：搭建简单，对性能要求不高。也正因为简单和消耗资源少， Gogs 慢慢的无法满足日益复杂的 DevOps 需求，比如 &lt;code>CI/CD&lt;/code> （ continuous integration and continuous delivery，持续集成和持续交付）、性能问题等。对于 &lt;code>Gogs&lt;/code> 和 &lt;code>gitlab&lt;/code> 我不作评论，这里有一篇来自 gitlab 官网相当于竞品分析的文章：&lt;a class="link" href="https://about.gitlab.com/comparison/gogs-vs-gitlab.html" target="_blank" rel="noopener"
>https://about.gitlab.com/comparison/gogs-vs-gitlab.html&lt;/a>。本文主要介绍如何使用 &lt;code>docker-compose&lt;/code> 搭建 &lt;code>gitlab&lt;/code> 。&lt;/p>
&lt;h2 id="准备工作">准备工作
&lt;/h2>&lt;p>关于使用 docker/docker-compose 搭建 gitlab，其实有很多教程了，官方也有相应的介绍。但是，我搜到的很多教程使用的 docker 镜像是来自民间大牛的开源镜像：&lt;a class="link" href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="noopener"
>https://github.com/sameersbn/docker-gitlab&lt;/a>，对于有点强迫症的我来说，既然 gitlab 官方提供了镜像，为何不用官方的呢？其次就是， gitlab 官方关于使用 docker-compose 搭建 gitlab 的描述篇幅较少，一些细节问题需要自己实践后才会遇到。下面一步一步介绍我的折腾过程，就当是自己的学习笔记吧。官方的教程在这里：&lt;a class="link" href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose" target="_blank" rel="noopener"
>https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose&lt;/a>。在开始之前，先介绍一下我的装备（穷不是我的错。。。）：&lt;/p>
&lt;ul>
&lt;li>一台 2012 年买的华硕笔记本，露个脸吧：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/11.png"
width="539"
height="719"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/11_hu_64194efac9bedf9e.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/11_hu_4fad048585ca4d31.png 1024w"
loading="lazy"
alt="11"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="179px"
>&lt;/p>
&lt;p>这台笔记本是我读大学用的『战机』，被我花巨资改造了一下：内存加到了 8G，换上一个 128G 的固态硬盘。这个笔记本在我读大学的时候已经被折腾过好多次了，自从毕业后就很少用了，所以拿出来在家里当服务器用，装了 win10 、 VirtualBox，然后装了一个 Ubuntu18.04.1 的虚拟机，分了 4G 内存、 40G 硬盘，安装好 docker、 docker-compose。&lt;/p>
&lt;ul>
&lt;li>一台低配版 Mac mini。 8G 内存、 1T 硬盘，用终端连接 Ubuntu 服务器。题外话：直接在我的 Mac mini 上搭建 gitlab，发现有点带不起来，可能是因为我装了太多软件了。&lt;/li>
&lt;/ul>
&lt;p>硬件就这两台电脑，云服务器目前是买不起的，也没有必要。下面开始折腾吧。&lt;/p>
&lt;h2 id="先让-gitlab-跑起来">先让 gitlab 跑起来
&lt;/h2>&lt;p>在 Ubuntu 服务器上拉取 gitlab-ce 官方镜像：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">docker&lt;/span> &lt;span class="n">pull&lt;/span> &lt;span class="n">gitlab&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">gitlab-ce&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="mf">11.3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">1&lt;/span>&lt;span class="n">-ce&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：我使用的 tag 是 &lt;code>11.3.1-ce.0&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>新建一个 &lt;code>docker-compose.yml&lt;/code> 文件，写入如下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab/gitlab-ce:11.3.1-ce.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitlab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITLAB_OMNIBUS_CONFIG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> external_url &amp;#39;http://git.blackmatch.cn&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;80:80&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;443:443&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;33:22&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存文件，在该文件目录下执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">docker-compose&lt;/span> &lt;span class="n">up&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后会看到终端上刷刷刷 ~~~ 滚动很多内容，耐心等待一会（我这里大概 3 分钟左右），然后在我的 Mac mini 的浏览器上访问 &lt;code>http://git.blackmatch.cn&lt;/code> （我事先已经将域名和 Ubuntu 服务器的 IP 做了 hosts 映射），看到如下界面：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/22.png"
width="1067"
height="573"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/22_hu_6e395287b1d52e08.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/22_hu_d64e77a25d433d92.png 1024w"
loading="lazy"
alt="22"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>&lt;/p>
&lt;p>看到这个界面说明 gitlab 已经成功跑起来了，可以在这个界面设置 &lt;code>root&lt;/code> 账号的密码，然后使用 &lt;code>root&lt;/code> 账号登录系统：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/33.png"
width="1011"
height="493"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/33_hu_aa4bd8d35de97539.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/33_hu_8efb76ceed5977ca.png 1024w"
loading="lazy"
alt="33"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="492px"
>&lt;/p>
&lt;p>登录成功后的界面是这样的：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/44.png"
width="1570"
height="659"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/44_hu_ca7d31527cdbe0b5.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/44_hu_b997910466a059c1.png 1024w"
loading="lazy"
alt="44"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>&lt;/p>
&lt;p>我来创建一个项目看看：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/55.png"
width="1584"
height="740"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/55_hu_99054483d114d49b.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/55_hu_c6b512c0854e004.png 1024w"
loading="lazy"
alt="55"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="513px"
>&lt;/p>
&lt;p>这个新建项目的 &lt;code>HTTP&lt;/code> 地址为：&lt;a class="link" href="http://git.blackmatch.cn/root/test.git" target="_blank" rel="noopener"
>http://git.blackmatch.cn/root/test.git&lt;/a>，这里顺带提一下，这里的地址中的 &lt;code>git.blackmatch.cn&lt;/code> 就是我在 &lt;code>docker-compose.yml&lt;/code> 文件中配置的环境变量：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITLAB_OMNIBUS_CONFIG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> external_url &amp;#39;http://git.blackmatch.cn&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 &lt;code>external_url&lt;/code> 配置的是外部 URL，会影响项目的访问地址，如果不配置，项目的访问地址会是一个随机字符串，在云服务器上搭建时尤其要注意这一点。&lt;/p>
&lt;h2 id="开启邮件服务">开启邮件服务
&lt;/h2>&lt;p>我们在使用 &lt;code>github&lt;/code> 等类似的平台工具的时候都会用到邮件服务，比如你在 &lt;code>github&lt;/code> 上进行注册、密码重置、有人给你的开源项目提 issue 等等的时候，你通常都会收到邮件提醒。 &lt;code>gitlab&lt;/code> 肯定也会有这个功能的，下面我们就来开启这个功能，在此之前需要准备一个邮箱账号，这个账号是用来负责发送邮件的，需要开启 &lt;code>smtp&lt;/code> 协议支持。使用 &lt;code>CTRL&lt;/code> + &lt;code>C&lt;/code> 快捷键停止正在运行中的 gitlab 容器，然后修改 &lt;code>docker-compose.yml&lt;/code> 为如下内容（这里以 gmail 邮箱为例）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab/gitlab-ce:11.3.1-ce.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitlab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITLAB_OMNIBUS_CONFIG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> external_url &amp;#39;http://git.blackmatch.cn&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # email setting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_enable&amp;#39;] = true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_address&amp;#39;] = &amp;#34;smtp.gmail.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_port&amp;#39;] = 587
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_user_name&amp;#39;] = &amp;#34;my.email@gmail.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_password&amp;#39;] = &amp;#34;my-gmail-password&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_domain&amp;#39;] = &amp;#34;smtp.gmail.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_authentication&amp;#39;] = &amp;#34;login&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_enable_starttls_auto&amp;#39;] = true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_tls&amp;#39;] = false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_openssl_verify_mode&amp;#39;] = &amp;#39;peer&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;80:80&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;443:443&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;33:22&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将配置中的 &lt;code>my.email@gmail.com&lt;/code> 和 &lt;code>my-gmail-password&lt;/code> 替换为你自己的邮箱和密码，记得一定要开启邮箱的 &lt;code>smtp&lt;/code> 协议服务，否则无法发送邮件。其他邮箱的配置方式大同小异，详细的介绍可以看这里：&lt;a class="link" href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener"
>https://docs.gitlab.com/omnibus/settings/smtp.html&lt;/a>。保存配置文件，然后执行 &lt;code>docker-compose up&lt;/code> ，然后使用 &lt;code>root&lt;/code> 账号登录 gitlab，新建一个账户（注意正确填写新建账户的邮箱地址），新建账户成功后，会给新账户的邮箱发送一封邮件，如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/66.png"
width="666"
height="470"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/66_hu_f7be5628a8ebaf4e.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/66_hu_6bd8762c144bb895.png 1024w"
loading="lazy"
alt="66"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>至此，邮件服务已成功启用。&lt;/p>
&lt;h2 id="安装-git-runner">安装 git-runner
&lt;/h2>&lt;p>前面我提到， gitlab 支持 CI/CD，如果我们需要对某个项目进行持续集成 / 持续交付，则需要给该项目配置一些任务，当我们每次 push 代码的时候，自动触发这些预先配置好的任务，而这些任务的执行者就是 gitlab-runner。可以简单的概括一下 gitlab 和 gitlab-runner 的关系： gitlab 在监测到有代码提交时，通知 gitlab-runner 去执行一些任务， gitlab-runner 执行完这些任务后将执行的结果反馈给 gitlab。所以，如果要开启 CI/CD，需要先完成两件事： 1. 在服务器上安装好 gitlab-runner； 2. 注册 gitlab-runner，打通 gitlab 和 gitlab-runner 之间的交互。在服务器上安装 gitlab-runner 的步骤如下：&lt;/p>
&lt;ul>
&lt;li>下载二进制安装包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="nb">wget &lt;/span>&lt;span class="n">-O&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">gitlab-runner&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="nb">gitlab-runner&lt;/span>&lt;span class="n">-downloads&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">s3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">amazonaws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">latest&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">binaries&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">gitlab-runner&lt;/span>&lt;span class="n">-linux-amd64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>修改权限：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="n">chmod&lt;/span> &lt;span class="p">+&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">gitlab-runner&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在服务器上新增一个用户（ gitlab-runner），专门用于执行 CI/CD 任务：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="n">useradd&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-comment&lt;/span> &lt;span class="s1">&amp;#39;GitLab Runner&amp;#39;&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-create-home&lt;/span> &lt;span class="nb">gitlab-runner&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-shell&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">bash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>执行安装：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="nb">gitlab-runner&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-user&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nb">gitlab-runner&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-working-directory&lt;/span>&lt;span class="p">=/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">gitlab-runner&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>启动 gitlab-runner：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="nb">gitlab-runner&lt;/span> &lt;span class="nb">start
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来就是注册 gitlab-runner，只有注册之后 gitlab 和 gitlab-runner 之间才能交互。使用 &lt;code>root&lt;/code> 账号登录 gitlab 之后，在路由 &lt;code>/admin/runners&lt;/code> 下可以看到注册 gitlab-runner 需要用到的 &lt;code>URL&lt;/code> 和 &lt;code>token&lt;/code> 。如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/77.png"
width="1150"
height="792"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/77_hu_efbd51ca2cffc714.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/77_hu_9b4178fffac13f5f.png 1024w"
loading="lazy"
alt="77"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;p>在服务器上执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="nb">gitlab-runner&lt;/span> &lt;span class="n">register&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后根据提示输入 &lt;code>URL&lt;/code> 和 &lt;code>token&lt;/code> 等信息就可以了，过程如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/88.png"
width="915"
height="261"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/88_hu_5af6dbaebf18fdc9.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/88_hu_66f54dc4e653a23e.png 1024w"
loading="lazy"
alt="88"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="841px"
>&lt;/p>
&lt;p>好吧。。。报错了，这个可能是我的 &lt;code>URL&lt;/code> 是域名，但是服务器没有配置 &lt;code>hosts&lt;/code> ，故在服务器上无法通过域名访问 gitlab，修改一下服务器的 &lt;code>/etc/hosts&lt;/code> 文件，重新注册一下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/99.png"
width="914"
height="291"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/99_hu_1a2f87be719f1783.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/99_hu_849814fdfc771bac.png 1024w"
loading="lazy"
alt="99"
class="gallery-image"
data-flex-grow="314"
data-flex-basis="753px"
>&lt;/p>
&lt;p>这回注册成功了，需要注意的是，在注册 gitlab-runner 的时候，需要选择一个或者多个执行器（ executor），不同的执行器有不同的特性和功能，如果你不知道怎么选择，可以先看看这里：&lt;a class="link" href="https://docs.gitlab.com/runner/executors/README.html#i-am-not-sure" target="_blank" rel="noopener"
>https://docs.gitlab.com/runner/executors/README.html#i-am-not-sure&lt;/a>。我这里选择了最简单的 &lt;code>shell&lt;/code> 执行器，&lt;code>shell&lt;/code> 执行器可以让 gitlab-runner 在执行任务的时候直接使用 shell 命令，但是如果用到一些构建工具，必须事先在服务器上安装这些工具，例如：在代码提交后通知 gitlab-runner 执行 &lt;code>npm run build&lt;/code> 命令来构建项目，则需要事先在服务器上安装 &lt;code>npm&lt;/code> 。 gitlab-runner 注册成功后，刷新一下网页，会看到多了一个 runner：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/110.png"
width="1566"
height="795"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/110_hu_6dba18b8904deb4c.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/110_hu_beb2d2fee00951cd.png 1024w"
loading="lazy"
alt="110"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/p>
&lt;p>这样我们就可以使用这个 runner 为我们执行任务了，这里需要注意的是，新创建的 runner，默认情况下，只对打 &lt;code>tag&lt;/code> 的 &lt;code>commit&lt;/code> 触发任务，如果想要每一次提交代码都执行，则需要修改 runner 的配置，如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/111.png"
width="960"
height="736"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/111_hu_f167d6e61e31f084.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/111_hu_9f6ae49efc12006d.png 1024w"
loading="lazy"
alt="111"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>至此， gitlab-runner 就已开启成功了，可以对项目进行 CI/CD 配置了。&lt;/p>
&lt;h2 id="测试-cicd">测试 CI/CD
&lt;/h2>&lt;p>经过前面的部署，目前我搭建的 gitlab 已经可以使用 CI 功能了，这里我简单的测试一下这个功能，前面我们已经使用 &lt;code>root&lt;/code> 用户创建了一个 &lt;code>test&lt;/code> 项目，将这个项目 &lt;code>clone&lt;/code> 到我的 Mac mini 电脑上，然后在项目根目录下分别创建 &lt;code>app.js&lt;/code> 和 &lt;code>.gitlab-ci.yml&lt;/code> 这两个文件，要启用 gitlab 的 CI 功能，除了需要正配安装并配置好 gitlab-runner 外，还需要在每个项目的根目录下创建一个名为 &lt;code>.gitlab-ci.yml&lt;/code> 文件，并在这个文件下配置具体的任务，例如我们可以简单的测试一下 gitlab-runner 是否能正常运行， &lt;code>.gitlab-ci.yml&lt;/code> 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">cp ./app.js /home/gitlab-runner/release&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里就设置一个很简单的任务：将项目中的 &lt;code>app.js&lt;/code> 文件拷贝到服务器的 &lt;code>/home/gitlab-runner/release&lt;/code> 目录下。在我的 Mac mini 上对 &lt;code>test&lt;/code> 项目修改的内容提交到服务器，会触发 gitlab-runner 执行任务，结果如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/112.png"
width="1362"
height="475"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/112_hu_29d6a5c637bf6ec8.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/112_hu_c6b0d3e9987b9a96.png 1024w"
loading="lazy"
alt="112"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="688px"
>&lt;/p>
&lt;p>需要注意的是， gitlab-runner 在服务器上执行每个项目预先配置的任务的时候是以 &lt;code>gitlab-runner&lt;/code> 用户的身份执行，所以要注意权限的问题，我第一次提交的时候，因为 &lt;code>release&lt;/code> 目录是我用服务器的 &lt;code>root&lt;/code> 权限创建的，所以 &lt;code>gitlab-runner&lt;/code> 用户没有权限将文件复制到该目录下，修改目录所有者后，第二次提交就成功了，如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/113.png"
width="1065"
height="451"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/113_hu_dee120ffbc79a33f.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/113_hu_c0c1cc3cba96dd8c.png 1024w"
loading="lazy"
alt="113"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="566px"
>&lt;/p>
&lt;p>至此， gitlab-runner 执行 CI 任务就测试成功了。当然这只是一个很简单的测试， gitlab 还有很多关于 CI/CD、 Auto DevOps 等方面的功能特性，对持续集成、持续交付、提升项目质量等方面都有很大的帮助，大家感兴趣可以多去尝试。&lt;/p>
&lt;h2 id="完整的配置">完整的配置
&lt;/h2>&lt;p>经过上面的配置和调试，目前的 gitlab 已经能满足开发工作流中一些常用的需求，如果没有其他需求，可以直接把该容器投入到生产中，完整的 &lt;code>docker-compose.yml&lt;/code> 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab/gitlab-ce:11.3.1-ce.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitlab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITLAB_OMNIBUS_CONFIG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> external_url &amp;#39;http://git.blackmatch.cn&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # email setting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_enable&amp;#39;] = true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_address&amp;#39;] = &amp;#34;smtp.gmail.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_port&amp;#39;] = 587
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_user_name&amp;#39;] = &amp;#34;my.email@gmail.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_password&amp;#39;] = &amp;#34;my-gmail-password&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_domain&amp;#39;] = &amp;#34;smtp.gmail.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_authentication&amp;#39;] = &amp;#34;login&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_enable_starttls_auto&amp;#39;] = true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_tls&amp;#39;] = false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> gitlab_rails[&amp;#39;smtp_openssl_verify_mode&amp;#39;] = &amp;#39;peer&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;80:80&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;443:443&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;33:22&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存文件后，使用如下命令启动容器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">docker-compose&lt;/span> &lt;span class="n">up&lt;/span> &lt;span class="n">-d&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>至此， gitlab 已成功部署。&lt;/p>
&lt;h2 id="其他需要注意的问题">其他需要注意的问题
&lt;/h2>&lt;ul>
&lt;li>gitlab 对服务器的性能要求较高，至少要保证有 4G 的内存，否则很容易出现各种奇怪的问题，比如网页 502 等。&lt;/li>
&lt;li>gitlab-runner 在执行任务的时候不对你的项目做任何修改，因为其原理是：先把项目所有内容 &lt;code>fetch&lt;/code> （默认）或者 &lt;code>clone&lt;/code> 到 &lt;code>/home/gitlab-runner&lt;/code> 目录下，然后再执行相关的任务操作，不会对你的项目做任何修改。&lt;/li>
&lt;li>每次修改完 &lt;code>docker-compose.yml&lt;/code> 文件后，重新启动容器可能会花费较多的时间，请耐心等待。&lt;/li>
&lt;li>汉化问题，可能较老的 gitlab-ce 版本需要专门下载一个中文包来做汉化，现在只需要在账户登录后，在账户设置中将 &lt;code>Preferred language&lt;/code> 设置成 &lt;code>简体中文&lt;/code> 即可，保存设置后刷新界面，效果如下：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/114.png"
width="1375"
height="890"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/114_hu_24649a134e7e7d8a.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-docker-compose-%E6%90%AD%E5%BB%BA-gitlab/114_hu_c979dd7abfca7e49.png 1024w"
loading="lazy"
alt="114"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;p>&lt;a class="link" href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose" target="_blank" rel="noopener"
>https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener"
>https://docs.gitlab.com/runner/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/2b43151fb92e" target="_blank" rel="noopener"
>https://www.jianshu.com/p/2b43151fb92e&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener"
>https://docs.gitlab.com/omnibus/settings/smtp.html&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.gitlab.com/runner/executors/README.html" target="_blank" rel="noopener"
>https://docs.gitlab.com/runner/executors/README.html&lt;/a>&lt;/p></description></item><item><title> 开启 bbr 差点引发一场血案</title><link>https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/</link><pubDate>Fri, 28 Sep 2018 21:37:40 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/</guid><description>&lt;h2 id="故事背景">故事背景
&lt;/h2>&lt;p>我在 vultr 上有一台 VPS，由于服务器在洛杉矶，在国内访问速度比较慢。以前有听说 Google 的 bbr 拥塞算法能够提高 tcp 的传输速度，于是想着把 bbr 打开。我的服务器环境如下：&lt;/p>
&lt;ul>
&lt;li>操作系统： CentOS7&lt;/li>
&lt;li>Linux 内核版本： 3.10.0&lt;/li>
&lt;li>SELINUX 配置： disabled&lt;/li>
&lt;li>docker 版本： 18.06.1-ce&lt;/li>
&lt;/ul>
&lt;h2 id="开启-bbr">开启 bbr
&lt;/h2>&lt;p>开启 bbr 需要先把 Linux 内核版本升级到 4.10 以上，所以首先需要升级内核。我是根据这个教程 &lt;a class="link" href="https://www.vultr.com/docs/how-to-deploy-google-bbr-on-centos-7" target="_blank" rel="noopener"
>https://www.vultr.com/docs/how-to-deploy-google-bbr-on-centos-7&lt;/a> 一步一步操作的，最后将 Linux 内核版本升级到了 4.18.9 ，最后也成功开启了 bbr，感觉访问速度稍微开了那么一点点。&lt;/p>
&lt;h2 id="docker-服务无法启动了">docker 服务无法启动了
&lt;/h2>&lt;p>开启 bbr 后发现 docker 服务起不来了，尝试过几次删掉重装，结果还是一样，排查得到如下报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">unable to configure the Docker daemon with file /etc/docker/daemon.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把这个报错仍 Google，尝试了几个方案都不行。继续折腾，再根据报错信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">failed to start docker application
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>继续 Google，在 segmentfault 找到了这个问答：&lt;a class="link" href="https://segmentfault.com/q/1010000002392472" target="_blank" rel="noopener"
>https://segmentfault.com/q/1010000002392472&lt;/a>，感觉和我的情况很像啊。暗喜中。。。看到这个问题有好多人回答，我就从上往下一个一个试，其中有个回答是：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/11.png"
width="1726"
height="274"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/11_hu_54725add5ab8af03.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/11_hu_95a305b80b020e79.png 1024w"
loading="lazy"
alt="11"
class="gallery-image"
data-flex-grow="629"
data-flex-basis="1511px"
>&lt;/p>
&lt;p>那我就照做 :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">vim /etc/selinux/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">i
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">edit...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shutdown -r now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一顿操作猛如虎，然后喝口茶等待系统重启。。。等了一两分钟，使用 ssh 连接服务，突然给我来一个惊喜：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">permission denied
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="系统无法登录了">系统无法登录了
&lt;/h2>&lt;p>ssh 连不过去了，卧槽这是什么情况。因为我的服务器只有 &lt;code>root&lt;/code> 账号，我一直都是用 &lt;code>root&lt;/code> 账号登录的，想尝试其他账号也不行了。我意识到肯定是我刚才修改了 &lt;code>SELINUX&lt;/code> 配置导致，但是现在登不进去系统想改回来也不行啊。虽然我对 Linux 懂的不多，但是这个时候一定要保持冷静，继续喝一口茶。想到了找学弟帮忙，学弟是做运维的，对 Linux 特别熟，大学时候和他一起培训过几天 Linux。学弟提醒我可以去 VPS 提供商的后台管理界面看看能不能做些什么。于是我登录到 vultr，进入后台管理界面，发现有一个 &lt;code>View Console&lt;/code> 操作，如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/22.png"
width="766"
height="224"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/22_hu_ade921021149be4d.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/22_hu_316dfa3ff71afaa0.png 1024w"
loading="lazy"
alt="22"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="820px"
>&lt;/p>
&lt;p>点击，弹出一个窗口，进入了一个 Linux 终端：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/33.png"
width="1500"
height="956"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/33_hu_593e97ca854903f9.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/33_hu_3fa831a65999cd7e.png 1024w"
loading="lazy"
alt="33"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>哈哈！感觉看到了希望，输入账号、密码，用力敲一下回车键，啪！提示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">permission denied
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>什么鬼？？？结果还是一样啊！还是登不进去啊！冷静冷静。。。继续喝口茶， Google 一番尝试了一些方法，都不行。茶已经喝完啦，脾气也上来了。想着直接把系统重置了吧，反正也没有特别重要的数据。说时迟那时快，当我快要点击重置系统按钮的时候，脑子里突然闪过一个画面，就像动漫主角快要被干掉时突然开挂了一样，这个画面就是：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/44.png"
width="1500"
height="956"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/44_hu_19db5abe67204ab4.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/44_hu_2332c7fb8bb3e4f1.png 1024w"
loading="lazy"
alt="44"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>这个难道就是传说中的恢复模式？不管了，点一下看看，出现了这个界面：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/55.png"
width="1266"
height="716"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/55_hu_76e8bae6f9831053.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/55_hu_ce7298056cd7634a.png 1024w"
loading="lazy"
alt="55"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>卧槽！我感觉还能抢救一下。看个这个，感觉又看到了希望，外挂已上线 ~~ 哈哈哈。说实话，我对这个界面真的不熟，只知道这里有很多个内核，可以选择任何一个系统启动。于是问学弟，结果被学弟鄙视，让我我按照忘记密码的套路去操作，接下来又是一波搜索。经过一番倒腾，终于找到了一个可行的方案，具体操作如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/66.png"
width="1502"
height="866"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/66_hu_1f9d5d2c96a7f8d3.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/66_hu_5c77259a268a9d0e.png 1024w"
loading="lazy"
alt="66"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;p>选中一个内核，我这里选择的是我更新后的内核，按下键盘上的 &lt;code>e&lt;/code> 键进入编辑模式，然后使用 &lt;code>向下键&lt;/code> 一直往后翻，找到 &lt;code>rhgb quiet LANG=en_US.UTF-8&lt;/code> 在后面加上 &lt;code>enforcing=0&lt;/code> ，如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/77.png"
width="1500"
height="864"
srcset="https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/77_hu_f6e280e960f28b4c.png 480w, https://www.blackmatch.cn/p/%E5%BC%80%E5%90%AF-bbr-%E5%B7%AE%E7%82%B9%E5%BC%95%E5%8F%91%E4%B8%80%E5%9C%BA%E8%A1%80%E6%A1%88/77_hu_641f41965dbdcf07.png 1024w"
loading="lazy"
alt="77"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;p>然后按下 &lt;code>Ctrl&lt;/code> + &lt;code>x&lt;/code> 启动系统，正确输入账号、密码，再次用力敲一下回车键，这次终于等进去了！！！总算是抢救回来了，然后里面修改 &lt;code>SELINUX&lt;/code> 配置，又是一顿操作猛如虎，重启之后能正常登录了，彻底好了。&lt;/p>
&lt;h2 id="docker-服务怎么办">docker 服务怎么办
&lt;/h2>&lt;p>虽然已经能够正常登录服务器了，但是 docker 还是老样子起不来。但是，在系统无法登录那一刻，我冥冥之中已经感觉到 docker 的问题应该如何解决了，因为我看到了这个回答：&lt;/p>
&lt;p>![88]({{ site.url }}/images/centos-enable-bbr/88.png)&lt;/p>
&lt;p>我的直觉向来很准的，因为读大学的时候自己经常折腾各种黑科技之类的，这种感觉我很熟悉，哈哈哈。按照这个方法操作，&lt;strong>最后 docker 服务真的好了&lt;/strong>，哈哈哈！&lt;/p>
&lt;h2 id="结束语">结束语
&lt;/h2>&lt;p>本来都已经打算重置系统了，没想到最后 bbr 成开启了， docker 服务也弄好，真是成功逆袭了啊！因为我对 Linux 不是很熟，所以大牛们可能觉得这根本不算是什么事，对我来说那可是相当惊险刺激啊！感谢学弟的耐心指导，我以后一定会努力学习 Linux 的。最后友情提示：&lt;/p>
&lt;p>&lt;strong>没事不要升级 Linux 内核！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>没事不要乱改 SELINUX 配置！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>没事不要瞎折腾！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>注意备份重要数据！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>注意备份重要数据！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>注意备份重要数据！&lt;/strong>&lt;/p></description></item><item><title> 使用 Gogs 搭建自己的 Git 服务</title><link>https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 22 Sep 2018 21:34:58 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/</guid><description>&lt;h2 id="什么是-gogs">什么是 Gogs
&lt;/h2>&lt;p>Gogs 是一款极易搭建的自助 Git 服务。作为程序员，可能对 Github 已经非常熟悉了，我们经常会把自己的代码提交到 Github。非付费用户在 Github 的代码是公开的，任何人都可以看到你提交的代码。有时候我们不想让别人看到自己提交的代码，或者只是想让我们授权的人访问自己的代码，通常会有一下几种方式：&lt;/p>
&lt;ul>
&lt;li>成为付费用户（不限平台），创建私有仓库。&lt;/li>
&lt;li>选择拥有一定数量免费私有仓库的平台，比如： Bitbucket 等。&lt;/li>
&lt;li>自己搭建完全免费的 Git 服务，比如： Gitlab 等。&lt;/li>
&lt;/ul>
&lt;p>Gogs 属于最后一种方式，这是一个开源项目，核心代码使用 Go 语言编写， UI 使用的是 Semantic-UI。&lt;span data-type="color" style="color:rgba(0, 0, 0, 0.87)">&lt;span data-type="background" style="background-color:rgb(255, 255, 255)">Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。 Go 目前支持 29 种语言，简体中文是必须的。&lt;/span>&lt;/span>&lt;/p>
&lt;h2 id="gogs-的使用场景">Gogs 的使用场景
&lt;/h2>&lt;p>Gogs 适合中小团队使用，工作流和大部分的 Git 服务类似，可以创建组织、仓库和工单（ issue），也可以把其他平台的仓库迁移过来。总的来说， Gog 能满足中小团队大部分的 Git 工作流需求。&lt;/p>
&lt;h2 id="为什么推荐-gogs">为什么推荐 Gogs
&lt;/h2>&lt;p>其实现在已经有很多类似的产品了，而且也都是免费的，有些甚至不用自己搭建，打开网页就能用，比如： Gitlab、码云等。我推荐 Gogs 只要是因为：&lt;/p>
&lt;ul>
&lt;li>完全开源，遵循 MIT 协议。&lt;/li>
&lt;li>核心代码使用 Go 语言编写（个人喜好）。&lt;/li>
&lt;li>官方完美支持中文。&lt;/li>
&lt;li>极易搭建。&lt;/li>
&lt;li>极简风格。&lt;/li>
&lt;/ul>
&lt;h2 id="如何搭建">如何搭建
&lt;/h2>&lt;p>官方提供了 5 种搭建方式，分别是：&lt;/p>
&lt;ul>
&lt;li>二进制安装&lt;/li>
&lt;li>源码安装&lt;/li>
&lt;li>包管理安装&lt;/li>
&lt;li>采用 Docker 部署&lt;/li>
&lt;li>通过 Vagrant 安装&lt;/li>
&lt;/ul>
&lt;p>Gogs 需要将一部分数据保存到数据库中，所以需要数据库支持，可以使用以下几种数据库：&lt;/p>
&lt;ul>
&lt;li>MySQL：版本 &amp;gt;= 5.7&lt;/li>
&lt;li>PostgreSQL&lt;/li>
&lt;li>MSSQL&lt;/li>
&lt;li>TiDB（实验性支持，使用 MySQL 协议连接）&lt;/li>
&lt;li>或者 什么都不安装 直接使用 SQLite3&lt;/li>
&lt;/ul>
&lt;p>根据官方文档的安装步骤一步一步搭建即可。但是，偷懒是程序员的必备技能之一啊！其实，搭建就分两部分： Gogs 主程序和数据库。 Gogs 主程序官方提供了 Docker 镜像，数据库也能找到对应的 Docker 镜像，于是自然而然就能想到 Docker 三剑客之一的 Docker Compose。大家可以使用我写的一个 docker-compose.yml 文件（数据库使用的是 MySQL），地址是：&lt;a class="link" href="https://github.com/blackmatch/gogs-docker-compose" target="_blank" rel="noopener"
>https://github.com/blackmatch/gogs-docker-compose&lt;/a>，几分钟就能轻松搭建好。&lt;/p>
&lt;h2 id="一些截图">一些截图
&lt;/h2>&lt;p>从官网搬来几张截图供大家欣赏：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/11.png"
width="1015"
height="762"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/11_hu_5b918fac536a36ef.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/11_hu_e1d62deccce11dc2.png 1024w"
loading="lazy"
alt="11"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/22.png"
width="1015"
height="762"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/22_hu_893d50e00d624cec.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/22_hu_6ec0dc3f87b2c5e1.png 1024w"
loading="lazy"
alt="22"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/33.png"
width="1012"
height="758"
srcset="https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/33_hu_c91194526b9a014f.png 480w, https://www.blackmatch.cn/p/%E4%BD%BF%E7%94%A8-gogs-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-git-%E6%9C%8D%E5%8A%A1/33_hu_2da2be9304fc4cc9.png 1024w"
loading="lazy"
alt="33"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;h2 id="更多信息">更多信息
&lt;/h2>&lt;p>官网：&lt;a class="link" href="https://gogs.io/" target="_blank" rel="noopener"
>https://gogs.io/&lt;/a>&lt;/p>
&lt;p>官方体验网站：&lt;a class="link" href="https://try.gogs.io/" target="_blank" rel="noopener"
>https://try.gogs.io/&lt;/a>&lt;/p></description></item><item><title>JavaScript 中数组遍历的那些事</title><link>https://www.blackmatch.cn/p/javascript-%E4%B8%AD%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link><pubDate>Thu, 20 Sep 2018 21:17:52 +0800</pubDate><guid>https://www.blackmatch.cn/p/javascript-%E4%B8%AD%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>今天测试 MM 给我提了个 issue：某个页面点击查询后就卡死了。由于查询的数据量比较多，我第一反应就是相关接口的 SQL 语句需要优化，但是我调试的时候发现几条查询语句都在 500 毫秒内得到结果返回了，而且这几条查询是并发执行的，所以 SQL 语句没问题，经过调试发现，主要耗时在程序的循环遍历，最外层的循环有 250 多次，每次遍历需要消耗 500 毫秒左右，这样的话接口返回就需要 2 分钟左右，而前端请求接口的超时默认是 80 秒，超时后走 &lt;code>catch&lt;/code> 回调，估计前端也没有处理 &lt;code>catch&lt;/code> ，所以导致界面一直转圈圈卡死了。言归正传，接口的主要耗时是在程序的循环操作，因为循环中有嵌套，总共 3 层（代码写得好烂，但是基于现在的业务逻辑，也只能这样了），通过 &lt;code>debug&lt;/code> ，发现最耗时的操作在最里层的循环中。&lt;/p>
&lt;h2 id="分析问题">分析问题
&lt;/h2>&lt;p>在第 2 层的循环，有一个操作是：&lt;strong>从一个数组中找出符合条件的所有元素，取这些元素的值进行一些计算&lt;/strong>，使用的方式也是循环遍历。我们把这个元素称为 &lt;code>arrayData&lt;/code>，这个数组的长度为 15000 左右，遍历这个数组的操作便是第 3 层循环。第 1 层循环次数是 250 次左右，第二层循环次数是 4 次，第 3 层循环次数是 15000 次左右。第 3 层循环在第 2 层循环中会执行多次，代码结构是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第 1 层循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第 2 层循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arrayData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第 3 层循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arrayData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第 3 层循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>感觉有点不忍直视。。。自己写的代码，哭着也要调试完。第 3 层循环，完整的走完一遍，大概需要 80 毫秒左右，然后在第 2 层循环中有 4 次这样的循环，所以这部分操作就消耗了 320 毫秒左右。所以，我把注意力集中在如何优化这 320 毫秒上。&lt;/p>
&lt;h2 id="优化方案">优化方案
&lt;/h2>&lt;h3 id="从业务逻辑优化">从业务逻辑优化
&lt;/h3>&lt;p>我首先考虑的是从业务逻辑上进行优化，经过排查代码，发现一个可行的方法是：减少 arrayData 的长度。&lt;code>arrayData&lt;/code> 可以从业务逻辑上进行分组，得到几个长度大约 &lt;strong>2000&lt;/strong> 左右的数据，这样第三层循环的时候就大大减少了循环次数，原来是 &lt;strong>15000*4=60000&lt;/strong> 次，现在是 &lt;strong>2000*4=8000&lt;/strong> 次，减少了 &lt;strong>52000&lt;/strong> 次。经过这样优化，第 3 层循环每次大概需要 40 毫秒左右，原来的耗时是 80 毫秒，这样对最外层的循环来说，每次减少了 40*4=160 毫秒，总时间减少了 &lt;strong>250*160 = 40000&lt;/strong>  毫秒，也就是 40 秒！我滴乖乖！虽然总时间减少了 40 秒，但还是很慢。&lt;/p>
&lt;h3 id="从数组遍历方式上优化">从数组遍历方式上优化
&lt;/h3>&lt;p>从上面的代码结构中可以看到，第 3 层循环使用的是 &lt;code>forEach&lt;/code> 来进行遍历的，第 1 层和第 2 层其实使用的是 &lt;code>ES6的 for-of&lt;/code> 进行遍历的。这个差别让我产生了疑虑：这两种遍历方式会不会存在性能上的差异？于是，我把第 3 层的遍历方式从 &lt;code>forEach&lt;/code> 换成了最古老的 &lt;code>for 循环遍历&lt;/code>，代码是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arrayData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arrayData&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>需要注意一个细节，在数组长度不会动态变化的情况下，要用一个变量来接数组的长度，不要直接写 &lt;code>i&amp;lt;arrayData.length&lt;/code>，据说也会对性能有细微的影响。&lt;/p>&lt;/blockquote>
&lt;p>这样一改，奇迹出现了。总时间又减少了 &lt;strong>20&lt;/strong> 秒左右。然后再东补补西补补，接口总耗时 30 秒左右，对我们的系统来说已经是可以接受的程度了，然后代码提交发布，打完收工，测试 MM 对我刮目相看。哈哈哈。。。等等，还没完呢！请继续往下看。&lt;/p>
&lt;h2 id="javascript-中的数组">JavaScript 中的数组
&lt;/h2>&lt;p>JavaScript 的数组与其他编程语言的数组有较大的差别，首先， JavaScript 的数组元素可以是任意类型，一个数组，第 1 个元素可以是数字，第 2 个元素可以是字符串，第 3 个元素可以是对象；其次， JavaScript 的数组其实也是对象，有对象就有 &lt;strong>键&lt;/strong> 和 &lt;strong>值&lt;/strong>，默认情况下， JavaScript 会给数组每一个元素创建一个从 0 开始的键，可以通过 [key] 访问数组中的元素，如果 key 传的是整型，会自动转换成字符串类型。举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arr1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;str&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;blackmatch&amp;#39;&lt;/span> &lt;span class="p">}];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>   &lt;span class="c1">// str
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// str
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span>   &lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr1&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [ &amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39; ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;str1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;str2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;str3&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// str2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// str2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [ &amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39; ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arr3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">arr3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;blackmatch&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">arr3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;age&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [ name: &amp;#39;blackmatch&amp;#39;, age: 18 ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;age&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// 18
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 18
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr3&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [ &amp;#39;name&amp;#39;, &amp;#39;age&amp;#39; ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arr4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">arr4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr4&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [ 1 ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;blackmatch&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">18&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [ &amp;#39;name&amp;#39;, &amp;#39;age&amp;#39; ]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里比较有意思的是，&lt;code>arr3.length&lt;/code> 输出的结果是 0 。其实原因很简单：因为 &lt;code>arr3&lt;/code> 中没有元素。通过 &lt;code>arr3['age']=18&lt;/code> 的方式并不能给 &lt;code>arr3&lt;/code> 添加元素，其原因是：&lt;/p>
&lt;blockquote>
&lt;p>在 &lt;strong>ECMAScript&lt;/strong> 中，&lt;strong>Object&lt;/strong> 是所有对象的基础，因此所有对象都具有 &lt;strong>Object&lt;/strong> 的基本属性和方法。&lt;/p>&lt;/blockquote>
&lt;p>也就是说， &lt;code>arr3['age']=18&lt;/code> 只是给 &lt;code>arr3&lt;/code> 添加了一个名为 &lt;code>age&lt;/code> 的 &lt;strong>键&lt;/strong>，并将其 &lt;strong>值&lt;/strong> 设置为 &lt;code>18&lt;/code> ，并没有往 &lt;code>arr3&lt;/code> 中添加元素，而 &lt;code>arr3.length&lt;/code> 返回的是 &lt;code>arr3&lt;/code> 元素的个数。给数组添加元素可以通过 &lt;strong>对象字面量&lt;/strong>、&lt;strong>push&lt;/strong>、&lt;strong>unshift&lt;/strong> 等方法实现，也可以通过 &lt;code>arr[key]=value&lt;/code> 的形式来添加或者修改元素，需要注意的是这里的 &lt;code>key&lt;/code> 必须是字符串的数字，比如： &lt;code>arr['1']='element'&lt;/code> ，由于数组的最大长度是 (2 ^ 32) - 1 ，所以数组元素的 &lt;code>key&lt;/code> 的范围是 0 ~ (2 ^ 32) - 2 。 JavaScript 的 &lt;code>Array&lt;/code> 对象还有很多细节值得关注，这里就不一一展开了。&lt;/p>
&lt;h2 id="javascript-中数组的遍历方式">JavaScript 中数组的遍历方式
&lt;/h2>&lt;p>JavaScript 数据遍历主要有以下 3 种方式：&lt;/p>
&lt;ul>
&lt;li>最古老的 for 循环遍历&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>forEach 遍历&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>ES6 的 for-of 遍历&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这 3 种遍历方式各有千秋，具体该使用哪种方式需要结合具体的业务场景，但是这 3 种遍历方式在性能上是存在差异的，我在 &lt;strong>jsPerf&lt;/strong> 平台对这 3 种方式进行了性能比较。测试方式很简单：先准备一个长度为 20000 的数组，数组的每个元素是一个对象，然后分别使用这 3 种方式对数组进行遍历，对每个元素做一个简单的赋值操作，最后比较每种方式的耗时。准备代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">20000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;blackmatch&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">18&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">handleRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试结果如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/javascript-%E4%B8%AD%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/perf-test.png"
width="2084"
height="1094"
srcset="https://www.blackmatch.cn/p/javascript-%E4%B8%AD%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/perf-test_hu_f4118111d640453c.png 480w, https://www.blackmatch.cn/p/javascript-%E4%B8%AD%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/perf-test_hu_bd1ef20c0fb4d8bd.png 1024w"
loading="lazy"
alt="perf-test"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;p>可以看出，在性能方面：&lt;strong>for&amp;gt;for-of&amp;gt;forEach&lt;/strong>。测试地址为：&lt;a class="link" href="https://jsperf.com/for-vs-foreach-vs-for-of-by-blackmatch/1" target="_blank" rel="noopener"
>https://jsperf.com/for-vs-foreach-vs-for-of-by-blackmatch/1&lt;/a> 。所以，如果需要遍历的数组长度比较大的时候，需要考虑一下性能问题。另外，不推荐使用 &lt;strong>for-in&lt;/strong> 对数组进行遍历，具体原因就不赘述了。&lt;/p>
&lt;h2 id="后话">后话
&lt;/h2>&lt;p>大家可能觉得一个接口要耗时几十秒，这能忍？说实话，我也不能忍，我的优化方式可能也不对；但是从结果来看，从原来的一直卡死，到现在的几十秒能出结果，至少这个功能现在能用了。还有最关键的一点就是，我们的客户甚至我的领导，对性能真的一点都不在乎，能用就行了，他们更在乎的是增加需求，修改需求，领导也不希望我在性能调优上花太多时间，其实我做的这次优化更多的是从业务逻辑上优化了，因为我一开始就觉得代码逻辑以及计算等操作不会消耗太多时间，应该优化的是 SQL 语句和数据库结构，但事实上，性能优化涉及到每一个细节，只是在不同的环境下某些细节会更加突出，某些细节可以忽略不计。不说了，我要去改需求了。。。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;p>《 JavaScript 高级程序设计（第 3 版）》&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/23812134" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/23812134&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://juejin.im/post/5a3a59e7518825698e72376b" target="_blank" rel="noopener"
>https://juejin.im/post/5a3a59e7518825698e72376b&lt;/a>&lt;/p></description></item><item><title> 写了个省市县的 mock 模块</title><link>https://www.blackmatch.cn/p/%E5%86%99%E4%BA%86%E4%B8%AA%E7%9C%81%E5%B8%82%E5%8E%BF%E7%9A%84-mock-%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 09 Sep 2018 21:15:48 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E5%86%99%E4%BA%86%E4%B8%AA%E7%9C%81%E5%B8%82%E5%8E%BF%E7%9A%84-mock-%E6%A8%A1%E5%9D%97/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>现在的很多软件可能都会有省市县三级联动菜单，网上也有很多现成的数据。但是，我们在使用的时候往往会有一些顾虑：这是不是标准的数据？这数据是不是最新的啊？这数据不是我想要的格式。。。在进行开发的过程中有时候也需要造一些省市县相关的数据，大家第一反应可能会是 mock，但是我找了一下没有发现相关的模块，但是找到了一个 &lt;a class="link" href="https://github.com/nuysoft/Mock/tree/refactoring" target="_blank" rel="noopener"
>mockjs&lt;/a>，于是我就依葫芦画瓢写了一个 &lt;a class="link" href="https://github.com/blackmatch/mockz" target="_blank" rel="noopener"
>mockz&lt;/a> 模块。&lt;/p>
&lt;h2 id="科普">科普
&lt;/h2>&lt;p>我国的行政区域划分其实是分为 5 个部分的，分别是省、市、县、镇、乡。通常软件设计的时候，只会让用户选择省、市、县三级，也就是我们常说的省市县三级联动菜单。制定这些标准的是 &lt;strong>国家统计局&lt;/strong>，可以在 &lt;a class="link" href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/" target="_blank" rel="noopener"
> 这里 &lt;/a> 查看我国最新的行政区域划分标准。&lt;/p>
&lt;h2 id="方案设计">方案设计
&lt;/h2>&lt;p>基于上面的说明，其实要做的就只有两件事：&lt;/p>
&lt;ul>
&lt;li>从国家统计局获取最新的行政区域划分标准数据。&lt;/li>
&lt;li>提供 mock 接口。&lt;/li>
&lt;/ul>
&lt;h2 id="获取数据">获取数据
&lt;/h2>&lt;p>通过爬虫获取最新的数据，这里不再赘述。爬取到数据后，将数据保存成 &lt;code>.json&lt;/code> 文件，方便后续引用。数据的格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34; 北京市 &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">children&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;110100000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34; 市辖区 &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">children&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;110101000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34; 东城区 &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>爬虫相关的代码暂时不公布，写得不好。使用爬虫的好处是：可以随时获取最新的数据，可以定制自己喜欢的数据格式。&lt;/p>&lt;/blockquote>
&lt;h2 id="提供-api-接口">提供 API 接口
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">mockz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mockz&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 全部数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">all&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取一个省级单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">province&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">province&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">province&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 山西省
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取一个市级单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">city&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">city&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">city&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 咸阳市
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取某个省的一个市级单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">city2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">city&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; 广东省 &amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">city2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 潮州市
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取一个县级单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">county&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">county&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">county&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 怀柔区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取某个省的一个县级单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">county2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">county&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; 广东省 &amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">county2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 蕉岭县
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取某个省某个市的一个县级单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">county3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">county&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; 广东省 &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; 广州市 &amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">county3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 天河区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机获取一个地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mockz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">address&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">address&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 山西省晋中市昔阳县
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>mockz.all()&lt;/code> 可用来做省市县三级联动菜单的数据源。&lt;/p>&lt;/blockquote>
&lt;h2 id="最后">最后
&lt;/h2>&lt;p>每一件小事都值得用心思考，然后付诸行动，不求一鸣惊人，只愿每日精进。模块的源码地址如下：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/blackmatch/mockz" target="_blank" rel="noopener"
>https://github.com/blackmatch/mockz&lt;/a>&lt;/p></description></item><item><title> 利用 Stream 批量处理文件</title><link>https://www.blackmatch.cn/p/%E5%88%A9%E7%94%A8-stream-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</link><pubDate>Sat, 08 Sep 2018 21:11:46 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E5%88%A9%E7%94%A8-stream-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</guid><description>&lt;h2 id="应用场景">应用场景
&lt;/h2>&lt;p>有 500 多个 &lt;code>.txt&lt;/code> 文件，每个文件几十 M，需要把这些文件的内容全部写入到数据库中，文件中每一行是一条数据，每个文件大约 200 万条数据。&lt;/p>
&lt;h2 id="处理流程">处理流程
&lt;/h2>&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E5%88%A9%E7%94%A8-stream-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/process.jpg"
width="547"
height="153"
srcset="https://www.blackmatch.cn/p/%E5%88%A9%E7%94%A8-stream-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/process_hu_f52a3028d4e474df.jpg 480w, https://www.blackmatch.cn/p/%E5%88%A9%E7%94%A8-stream-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/process_hu_a62061e1f718f00.jpg 1024w"
loading="lazy"
alt="process"
class="gallery-image"
data-flex-grow="357"
data-flex-basis="858px"
>&lt;/p>
&lt;p>这也是数据流动的过程，期望达到的效果是：&lt;strong>快速&lt;/strong>、&lt;strong>高性能（占用内存小）&lt;/strong>。这 3 个步骤中，&lt;code>解析、处理文件内容&lt;/code> 这个步骤基本不会存在什么问题。问题的难点在 &lt;code>读文件&lt;/code> 和 &lt;code>写入数据库&lt;/code> 这两个步骤。&lt;/p>
&lt;h2 id="读文件">读文件
&lt;/h2>&lt;p>一看到读取大文件或者批量文件，可能大家第一反应就是 &lt;code>stream&lt;/code>。我也是这样想的，但是这里不能直接使用可读流来读取文件，前面提到，每个文件中每一行是一条数据，但是通过可读流读取文件的时候是以 &lt;code>buffer&lt;/code> 的形式（也可以设置其他形式，比如 &lt;code>objectMode&lt;/code>）读取的，并不是按照一行一行的方式读取，或许通过一些技巧可以实现，但是没有必要，因为有现成的 &lt;code>readline&lt;/code> 模块。&lt;code>readline&lt;/code> 模块读取文件的思想和可读流是一样的，只不过该模块每一次读取的数据是文件中的一行而已，通过 &lt;code>readline&lt;/code> 模块可以实现逐行读取文件，且不会造成内存压力。&lt;/p>
&lt;h2 id="写入数据">写入数据
&lt;/h2>&lt;p>我使用的是 MySQL 数据库，因为文件中会有很多重复的内容，所以我给表的某个字段添加了 &lt;code>UNIQUE&lt;/code> 索引，为了后期使用方便，我给 2 个字段添加了 &lt;code>INDEX&lt;/code> 索引。这种做法对提高数据质量和查询速度有一定的帮助，但相对的，会对数据写入造成一定的影响，简单点说就是写入速度会变慢。本文不展开讨论如何提升数据库的写入速度，只是交代有这么个情况而已。写入数据库通过 &lt;a class="link" href="https://knexjs.org/" target="_blank" rel="noopener"
>knex&lt;/a> 和 &lt;a class="link" href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener"
>mysql&lt;/a> 这两个模块来实现。&lt;/p>
&lt;h2 id="读取和写入速度差异的问题">读取和写入速度差异的问题
&lt;/h2>&lt;p>我们姑且忽略中间解析、处理文件内容所消耗的时间，把注意力集中在数据的读取和写入上。上面提到，写入数据库的过程是比较慢的，此外每次有数据需要写入的时候都得先连接数据库，等待数据库反馈，然后再写入下一条数据。由于读取数据的速度是非常快的，一个文件 2 秒左右就读取完成了，但是要把一个文件的所有数据完全写入到数据库中需要花费 30 分钟左右，这种巨大的速度差异最终会给内存带来很大的压力，没有写入到数据库的数据一直在内存中堆积，直到最终内存爆了，程序异常退出。&lt;/p>
&lt;h2 id="解决读写速度差异问题">解决读写速度差异问题
&lt;/h2>&lt;p>其实这个问题概括一下就是：&lt;strong>读太快了，写太慢了&lt;/strong>。解决思路也就有 2 条了： 1. 读慢一点； 2. 写快一点。最理想的情况是读写速度趋向于平衡，且读写速度都非常快，但是要达到这种状态，以我目前的能力是不可能的（求大佬带）。所以我选择了第一种方案：&lt;strong>降低读取速度&lt;/strong>。经过测试，完全读取一个文件的所有内容到内存中等待写入不会对我的机器造成内存压力，占用大概 100 多 M 内存。所以，我最终的解决方案是：&lt;strong>一次读取一个文件的数据，把这些数据全部扔给可写流，可写流把这些数据一条一条写入到数据库中，等可写流把队列中所有的数据都写入到数据库后，再读取下一个文件的内容，然后把数据继续扔到可写流中，如此循环操作，直到所有的文件都处理完成&lt;/strong>。这样做会有 2 个好处：&lt;strong>1.不会造成内存压力；2.可写流中一直有数据在等待写入数据库，不会造成资源浪费&lt;/strong>。&lt;/p>
&lt;h2 id="代码实现">代码实现
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">dealFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">dst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mail&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">rl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">readline&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createInterface&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">input&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createReadStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dst&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;line&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;close&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`文件 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> 读取完毕`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">WStream&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Writable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">opts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">opts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;nextFile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dealFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;nextFile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">encoding&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">rx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\S+[a-z0-9]@[a-z0-9\.]+/img&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mArr&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">mArr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;----&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">password&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">knex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;netease&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">insert&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10000&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`队列中还有 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writableLength&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> 数据需要处理`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writableLength&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;nextFile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;all done!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}).&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10000&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`队列中还有 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writableLength&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> 数据需要处理`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writableLength&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;nextFile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileIdx&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;all done!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readdirSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./mail&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">txtFiles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.txt&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`共有 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> 个文件`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">WStream&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">txtFiles&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">run&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述是核心代码，写得有点烂，还有很多可以优化的空间，这里我们只看思路就好了。几个关键点：&lt;/p>
&lt;ul>
&lt;li>写一个可写流的类，继承 &lt;code>Stream.Writable&lt;/code>，并实现 &lt;code>_write&lt;/code> 方法。&lt;/li>
&lt;li>每读取文件中的一行数据，就调用可写流的 &lt;code>.write&lt;/code> 方法，把这条数据扔到可写流中等待处理。&lt;/li>
&lt;li>判断可写流中有没有数据需要处理，通过 &lt;code>writable.writableLength&lt;/code> 属性来判断，这个属性是在 &lt;code>Node.js&lt;/code> 的 &lt;code>v9.4.0&lt;/code> 版本中加入的。需要注意的是，这个属性在这里指的是字节数，不是行数。&lt;/li>
&lt;li>需要在调用 &lt;code>next()&lt;/code> 方法之后再去判断 &lt;code>writable.writableLength&lt;/code> 的值，否则会出现程序卡死，因为如果在 &lt;code>next()&lt;/code> 方法之前判断的话，处理可写流队列中最后一条数据的时候 &lt;code>writable.writableLength&lt;/code> 的值是大于 0 的，而这又是最后一次调用可写流的 &lt;code>.write&lt;/code> 方法，所以不会继续读取下一个文件了，造成程序卡死。&lt;/li>
&lt;/ul>
&lt;h2 id="总结一下">总结一下
&lt;/h2>&lt;p>&lt;code>Node.js&lt;/code> 的 &lt;code>stream&lt;/code> 模块及其理念在原生模块中应用非常广泛，比如：&lt;code>HTTP.Request&lt;/code>、&lt;code>HTTP.response&lt;/code>、&lt;code>process.stdin&lt;/code>、&lt;code>process.stdout&lt;/code> 等。这其实类似于 &lt;strong>大事化小小事化了&lt;/strong> 的思想，我一开始也尝试过一些其他的解决方案，比如：&lt;/p>
&lt;ul>
&lt;li>并发读取多个文件，通过 &lt;code>Promise&lt;/code> 和 &lt;code>async/await&lt;/code> 控制并发。&lt;/li>
&lt;li>一个文件一个文件读取，读取完一个文件后等待 25 分钟再读取下一个文件。&lt;/li>
&lt;/ul>
&lt;p>这两种方案都不是很理想，没能解决 &lt;strong>读写速度差异问题&lt;/strong>。由于 &lt;code>stream&lt;/code> 用得也不多，所以走了一些弯路，但就结果而言，目前的解决方案能够比较优雅的解决了我的问题，同时也能学到了一些东西。文章肯定存在很多纰漏，欢迎各位大佬指正。&lt;/p></description></item><item><title>CentOS 通过 letsencrypt 实现 HTTPS</title><link>https://www.blackmatch.cn/p/centos-%E9%80%9A%E8%BF%87-letsencrypt-%E5%AE%9E%E7%8E%B0-https/</link><pubDate>Tue, 08 May 2018 21:07:51 +0800</pubDate><guid>https://www.blackmatch.cn/p/centos-%E9%80%9A%E8%BF%87-letsencrypt-%E5%AE%9E%E7%8E%B0-https/</guid><description>&lt;p>&lt;a class="link" href="https://letsencrypt.org/" target="_blank" rel="noopener"
>letsencrypt&lt;/a> 提供了免费的 SSL 证书服务，我们可以用它来实现 HTTPS。我的服务器系统是 CentOS7 ，使用的 server 程序是 &lt;a class="link" href="https://nginx.org/en/" target="_blank" rel="noopener"
>nginx&lt;/a>。下面分享我使用 letsencrypt 的过程。官方推荐使用 &lt;a class="link" href="https://certbot.eff.org/" target="_blank" rel="noopener"
>certbot&lt;/a> 工具。&lt;/p>
&lt;ul>
&lt;li>开启 CentOS 的 EPEL 扩展&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yum install -y epel-release-latest-7.noarch.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>安装 certbot&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yum install -y certbot-nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>停止 nginx 服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">systemctl stop nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>生成 SSL 证书&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">certbot certonly --standalone -d blackmatch.cn -d www.blackmatch.cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>中途需要输入邮箱、同意协议等，按照提示操作即可。&lt;/p>
&lt;blockquote>
&lt;p>把域名替换成你自己的域名。&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>配置 nginx 文件，编辑 &lt;code>/etc/nginx/conf.d/default.conf&lt;/code>，参考我的配置：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen 80;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_name blackmatch.cn www.blackmatch.cn;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 301 https://$server_name$request_uri;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen 443 ssl;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_name blackmatch.cn www.blackmatch.cn;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_certificate /etc/letsencrypt/live/blackmatch.cn/fullchain.pem;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_certificate_key /etc/letsencrypt/live/blackmatch.cn/privkey.pem;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_session_cache shared:le_nginx_SSL:1m;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_session_timeout 1440m;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_prefer_server_ciphers on;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_ciphers &amp;#34;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> root /usr/share/nginx/html;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> index index.html index.htm;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error_page 404 /404.html;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存退出文件&lt;/p>
&lt;ul>
&lt;li>启动 nginx&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">systemctl start nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>测试&lt;/li>
&lt;/ul>
&lt;p>在浏览器访问 &lt;a class="link" href="https://blackmatch.cn/" target="_blank" rel="noopener"
>blackmatch.cn&lt;/a>，如果配置成功应该像这样的：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/centos-%E9%80%9A%E8%BF%87-letsencrypt-%E5%AE%9E%E7%8E%B0-https/web.png"
width="232"
height="41"
srcset="https://www.blackmatch.cn/p/centos-%E9%80%9A%E8%BF%87-letsencrypt-%E5%AE%9E%E7%8E%B0-https/web_hu_6ebf935eb2f79142.png 480w, https://www.blackmatch.cn/p/centos-%E9%80%9A%E8%BF%87-letsencrypt-%E5%AE%9E%E7%8E%B0-https/web_hu_34508ce753130224.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="565"
data-flex-basis="1358px"
>&lt;/p>
&lt;p>如果失败，请根据错误提示寻找合适的解决方案。&lt;/p>
&lt;ul>
&lt;li>定期更新证书&lt;/li>
&lt;/ul>
&lt;p>证书的默认有效期是 3 个月，所以每三个月要更新一次证书。可以通过 Linux 的 &lt;code>crontab&lt;/code> 来定期更新证书，使用 &lt;code>crontab -e&lt;/code> 命令打开编辑界面，最后添加一行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> * * certbot renew
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后保存并退出。这样就设置了每个月 1 号的 0 点 0 分自动刷新证书。&lt;/p></description></item><item><title> 记一次使用 DB2 数据库遇到的坑</title><link>https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link><pubDate>Tue, 24 Apr 2018 02:27:07 +0800</pubDate><guid>https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid><description>&lt;p>IBM DB2 是美国 IBM 公司开发的一套关系型数据库管理系统，它主要的运行环境为 UNIX（包括 IBM 自家的 AIX）、 Linux、 IBM i（旧称 OS/400 ）、 z/OS，以及 Windows 服务器版本。 DB2 主要应用于大型应用系统，具有较好的可伸缩性，可支持从大型机到单用户环境，应用于所有常见的服务器操作系统平台下。&lt;/p>
&lt;p>我需要实现的技术方案如下：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/structure.webp"
width="1080"
height="390"
srcset="https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/structure_hu_2d75b4fcfa1dad31.webp 480w, https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/structure_hu_33d0f998f60612eb.webp 1024w"
loading="lazy"
alt="debug"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="664px"
>&lt;/p>
&lt;p>需要从 db2 数据库中取数，然后把数据写入到 MySQL 数据中。&lt;/p>
&lt;h2 id="理论知识">理论知识
&lt;/h2>&lt;p>DB2 数据库几个概念&lt;/p>
&lt;p>instance, 同一台机器上可以安装多个 DB2 instance。&lt;/p>
&lt;p>database, 同一个 instance 下面可以创建有多个 database。&lt;/p>
&lt;p>schema, 同一个 database 下面可以配置多个 schema。 所有的数据库对象包括 table、 view、 sequence， etc 都必须属于某一个 schema。&lt;/p>
&lt;p>另外， database 是一个 connection 的目标对象，也就是说用户发起一个 DB2 连接时，指的是连接到到一个 database，而不是连接到一个 instance，也不是连接到一个 schema。&lt;/p>
&lt;p>但是 DB2 的启动和关停是以 instance 为单位的。可以启动一个 instance，或者关停一个 instance。但不可以启动或者关停一个数据库或者一个 schema。&lt;/p>
&lt;h2 id="使用的模块">使用的模块
&lt;/h2>&lt;p>使用了 ibm_db，该模块在安装时会根据当前平台自动下载对应的客户端驱动程序。&lt;/p>
&lt;p>第一坑
遇到的第一坑是 CODEPAGE（代码页），可以简单的理解为这是数据库的编码，在 db2 数据库数据库中，如果客户端和服务端的 CODEPAGE 不一致，连接时会报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">SQL0332N Character conversion from the source code page &amp;#34;1386&amp;#34; to the target code page &amp;#34;819&amp;#34; is not supported
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而使用的 ibm-db 中没有提到如何设置 CODEPAGE 的方式，在各种 google 攻略后，得到的解决方案有两个：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>修改客户端的操作系统语言。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加系统环境变量 &lt;code>DB2CODEPAGE&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我的后端架构为：&lt;/p>
&lt;p>&lt;img src="https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/server-layer.webp"
width="720"
height="692"
srcset="https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/server-layer_hu_d3a1aea8ce6646dc.webp 480w, https://www.blackmatch.cn/p/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-db2-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/server-layer_hu_79fdc3e86291b3b3.webp 1024w"
loading="lazy"
alt="debug"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="249px"
>&lt;/p>
&lt;p>最外层是 ubuntu 系统，然后起一个容器，容器是基于 ubuntu16.04 的，然后在容器中有一个 ETL 模块，这是一个 node 模块， node 通过调用这个模块去连接 db2 数据库。&lt;/p>
&lt;p>不论我怎么修改最外层的 ubuntun 系统还是容器中的 unbuntu 系统的语言和环境变量，都不起作用。&lt;/p>
&lt;p>最终解决方案：&lt;/p>
&lt;p>在 &lt;code>ETL module&lt;/code> 模块中，在连接 db2 代码之前设置环境变量：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">process.env.DB2CODEPAGE = 1386;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="第二坑">第二坑
&lt;/h2>&lt;p>成功连接到 db2 数据库后，发现取到的数据的中文是乱码。于是又开始在网上找攻略，大多数答案都是说 &lt;code>CODEPAGE&lt;/code> 问题。可是上一个坑已经解决了呀。优于无法直接访问到 db2 所在的服务器，所以无法很准确的确认 db2 数据库使用的 &lt;code>CODEPAGE&lt;/code> 值，但是经过各种调试及执行如下 SQL 语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">SELECT CODEPAGE FROM SYSCAT.DATATYPES WHERE TYPENAME = &amp;#39;VARCHAR&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得出的结论都是： db2 数据库的 &lt;code>CODEPAGE&lt;/code> 是 1386 ，可以理解成 db2 数据库的编码是 GBK。所以我把客户端的 CODEPAGE 设置成 1386 应该是没有问题的呀？但是实际情况就是中文无法正确展示。&lt;/p>
&lt;p>最终解决方案：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">process.env.DB2CODEPAGE = 1208;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将客户端的 CODEPAGE 设置成 1208 即可。一脸懵逼啊！此方案是我拍脑袋尝试后得出的。 1208 对应的编码是 utf8 。&lt;/p>
&lt;h2 id="其他坑">其他坑
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>环境问题，项目自身的打包发布流程存在各种坑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ibm_db 问题， 2.1.0 之前的版本在连接上是存在一些问题的，我开始折腾的时候是 2.3.0 版本，其实这个版本也有一些问题，然后我提了个 issue，过了两天后更新到了 2.3.1 ，使用这个版本后神奇的解决了连接问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 ibm_db 去连接 db2 数据库，不是真正的命令行客户端连接，而是使用了一个驱动程序去连接，所以网上的在客户端执行 &lt;code>db2set DB2CODEPAGE=1386&lt;/code> 的方法都行不通。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 Node.js 连接 db2 数据库的相关资料较少，使用的人也少，搜到很多都是 java 的资料。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>为了实现开头提到的技术方案，我加班加点花了差不多一个礼拜的时间，除了项目本身的打包、运行环境的坑以及对 db2 不熟悉外，其他问题大概花了两天左右。经过一个礼拜的折腾，对解决问题有了一些心得：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>环境很重要，因为我在本地开发环境是执行代码是比较顺利的，但是现场环境比较复杂，所以在解决问题之前要充分了解现场的软件环境，包括操作系统、版本等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果是没遇到的东西，最后先去了解基本的概念、必要的基础知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从最终代码执行处入手，如果我一开始就在使用代码连接 db2 的地方通过 &lt;code>process.env.DB2CODEPAGE&lt;/code> 打印出来的话，可能会省很多时间。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/e1f38505f789" target="_blank" rel="noopener"
>https://www.jianshu.com/p/e1f38505f789&lt;/a>&lt;/p></description></item><item><title> 搜索</title><link>https://www.blackmatch.cn/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.blackmatch.cn/search/</guid><description>&lt;pre>&lt;code> params:
icon: search
&lt;/code>&lt;/pre>
&lt;hr></description></item></channel></rss>